<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DMTiPACS - Procedure</title>

    <!-- Styles  -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <!-- Navbar -->
    @Html.Partial("HomeHeader")

    <!-- Section Side -->
    <section class="software-section">
        <div class="container">
            <nav class="navbar navbar-default">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#" onclick="btnDashboardOnclick()">Dashboard</a>
                </div>
                <div class="collapse navbar-collapse" id="myNavbar">
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="#" onclick="btnModalityProcedureOnclick()">Modality Procedure</a></li>
                        <li><a href="#" onclick="btnBodyPartsOnclick()">Body Parts</a></li>
                        <li><a href="#" onclick="btnUserOnclick()">User</a></li>
                        <li><a href="#" onclick="btnRateOnclick()">Rate</a></li>
                        <li class="active"><a href="#" onclick="btnProcedureOnclick()">Procedure</a></li>
                        <li><a href="#" onclick="btnReportsOnclick()">Reports</a></li>
                    </ul>
                </div>
            </nav>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <table style="width: 100%" border="0">
                        <tr>
                            <td>
                                <h4>Procedures</h4>
                            </td>
                            <td align="right">
                                <i class="fa fa-hospital-o fa-fw"></i> Facility: &nbsp;  <b><span id="defaultFacility"></span></b>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="panel-heading">
                    <table style="width: 100%" border="0">
                        <tr>
                            <td style="width: 50%">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inputFilter" placeholder="Search">
                                </div>
                            </td>
                            <td style="width: 50%" align="right">
                                <button id="addButton" class="btn btn-primary" onclick="btnAddProcedureOnclick()"><i class="fa fa-plus fa-fw"></i>Add</button>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <div id="procedureFlexGrid" class="grid"></div>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGrid">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- delete confirmation procedure modal -->
    <div class="modal fade" id="deleteConfirmationProcedureModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Procedure</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Procedure?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="btnConfirmDeleteProcedure" onclick="btnConfirmDeleteProcedureOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnCloseDeleteProcedureModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var procedureCollectionView;
        var procedureFlexGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;

        var currentUserName;
        var userType;

        // get procedure
        function getProcedureData() {
            var procedureArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/procedure/listByFacilityId/' + getUrlParameter("facilityId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (procedureListResult) {
                    if (procedureListResult.length > 0) {
                        for (i = 0; i < procedureListResult.length; i++) {
                            var txDate = new Date(procedureListResult[i]["TransactionDateTime"]);

                            procedureArray.push({
                                EditButton: "<button id='editButton' class='btn btn-primary btn-xs btn-block' onclick='btnEditProcedureOnclick()' " + lockElement('editButton') + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button id-'deleteButton' class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteProcedureOnclick()' " + lockElement('deleteButton') + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: procedureListResult[i]["Id"],
                                TransactionNumber: procedureListResult[i]["TransactionNumber"],
                                TransactionDateTime: DateFormat(txDate),
                                TransactionTime: ConvertTimeformat('00:00', procedureListResult[i]["TransactionTime"]),
                                DICOMFileName: procedureListResult[i]["DICOMFileName"],
                                PatientName: procedureListResult[i]["PatientName"].toUpperCase(),
                                Gender: procedureListResult[i]["Gender"],
                                DateOfBirth: procedureListResult[i]["DateOfBirth"],
                                Age: procedureListResult[i]["Age"],
                                Particulars: procedureListResult[i]["Particulars"],
                                ModalityId: procedureListResult[i]["ModalityId"],
                                Modality: procedureListResult[i]["Modality"],
                                BodyPartId: procedureListResult[i]["BodyPartId"],
                                BodyPart: procedureListResult[i]["BodyPart"],
                                UserId: procedureListResult[i]["UserId"],
                                User: procedureListResult[i]["User"],
                                Doctor: procedureListResult[i]["Doctor"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return procedureArray;
        }

        var date;
        function DateFormat(date) {
            function pad(n) { return n < 10 ? '0' + n : n }
            return date.getUTCFullYear() + '-'
            + pad(date.getUTCMonth() + 1) + '-'
            + pad(date.getUTCDate())
        }

        function ConvertTimeformat(format, str) {
            var hours = Number(str.match(/^(\d+)/)[1]);
            var minutes = Number(str.match(/:(\d+)/)[1]);
            var AMPM = str.match(/\s?([AaPp][Mm]?)$/)[1];
            var pm = ['P', 'p', 'PM', 'pM', 'pm', 'Pm'];
            var am = ['A', 'a', 'AM', 'aM', 'am', 'Am'];
            if (pm.indexOf(AMPM) >= 0 && hours < 12) hours = hours + 12;
            if (am.indexOf(AMPM) >= 0 && hours == 12) hours = hours - 12;
            var sHours = hours.toString();
            var sMinutes = minutes.toString();
            if (hours < 10) sHours = "0" + sHours;
            if (minutes < 10) sMinutes = "0" + sMinutes;
            if (format == '0000') {
                return (sHours + sMinutes);
            } else if (format == '00:00') {
                return (sHours + ":" + sMinutes);
            } else {
                return false;
            }
        }

        // Add procedure
        function btnAddProcedureOnclick() {
            document.getElementById("#addButton").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Adding";
            $("#addButton").prop("disabled", true);

            $.ajax({
                type: "POST",
                url: '/api/procedure/add',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (id) {
                    if (id > 0) {
                        window.location = "/Software/ProcedureDetail?facilityId=" + getUrlParameter("facilityId") + "&id=" + id;
                    } else {
                        toastr.error("Internal Server Error");
                    }
                }
            });
        }

        // Edit procedure
        function btnEditProcedureOnclick() {
            procedureCollectionView.editItem(procedureCollectionView.currentItem);
            var currentItem = procedureCollectionView.currentEditItem;

            window.location = "/Software/ProcedureDetail?facilityId=" + getUrlParameter("facilityId") + "&id=" + currentItem.Id;
        }

        // delete procedure
        function btnDeleteProcedureOnclick() {
            $("#deleteConfirmationProcedureModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteProcedure").innerHTML = "Yes";
            $("#btnConfirmDeleteProcedure").prop("disabled", false);
            $("#btnCloseDeleteProcedureModal").prop("disabled", false);
        }

        // confirm delete procedure
        function btnConfirmDeleteProcedureOnclick() {
            document.getElementById("btnConfirmDeleteProcedure").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteProcedure").prop("disabled", true);
            $("#btnCloseDeleteProcedureModal").prop("disabled", true);

            procedureCollectionView.editItem(procedureCollectionView.currentItem);
            var currentItem = procedureCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/procedure/delete/' + currentItem.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationProcedureModal").modal("hide");

                        procedureCollectionView = new wijmo.collections.CollectionView(getProcedureData());
                        procedureCollectionView.canFilter = true;
                        procedureCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#inputFilter').keyup(function () {
                            filterText = this.value.toLowerCase();
                            procedureCollectionView.refresh();
                        });

                        procedureCollectionView.filter = function (item) {
                            return !filterText || (item.TransactionNumber.toLowerCase().indexOf(filterText) > -1)
                                               || (item.PatientName.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Gender.toLowerCase().indexOf(filterText) > -1)
                                               || (item.BodyPart.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Modality.toLowerCase().indexOf(filterText) > -1)
                                               || (item.User.toLowerCase().indexOf(filterText) > -1);
                        }

                        procedureCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtons();
                        });

                        // Flex Grid
                        procedureFlexGrid.itemsSource = procedureCollectionView;
                        procedureFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationProcedureModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedure").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedure").prop("disabled", false);
                        $("#btnCloseDeleteProcedureModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationProcedureModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedure").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedure").prop("disabled", false);
                        $("#btnCloseDeleteProcedureModal").prop("disabled", false);
                    }
                }
            });
        }

        // navigation button for flexgrid
        function updateNavigateButtons() {
            if (procedureCollectionView.pageSize <= 0) {
                document.getElementById('navigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGrid').style.display = 'block';
            if (procedureCollectionView.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (procedureCollectionView.pageIndex === (procedureCollectionView.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (procedureCollectionView.pageIndex + 1) + ' / ' + procedureCollectionView.pageCount;
        }

        function btnDashboardOnclick() {
            window.location = "/Software/Index?facilityId=" + getUrlParameter("facilityId");
        }

        function filterModalityGrid() {
            console.log(filterModality.selectedIndex);
        }

        function btnModalityProcedureOnclick() {
            window.location = "/Software/Modality?facilityId=" + getUrlParameter("facilityId");
        }

        function btnBodyPartsOnclick() {
            window.location = "/Software/BodyParts?facilityId=" + getUrlParameter("facilityId");
        }

        function btnUserOnclick() {
            window.location = "/Software/Users?facilityId=" + getUrlParameter("facilityId");
        }

        function btnRateOnclick() {
            window.location = "/Software/Rate?facilityId=" + getUrlParameter("facilityId");
        }

        function btnProcedureOnclick() {
            window.location = "/Software/Procedure?facilityId=" + getUrlParameter("facilityId");
        }

        function btnReportsOnclick() {
            window.location = "/Software/Reports?facilityId=" + getUrlParameter("facilityId");
        }

        function lockPage() {
            if (!!document.getElementById('editButton')) document.getElementById('editButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('deleteButton')) document.getElementById('deleteButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('addButton')) document.getElementById('addButton').setAttribute('disabled', 'disabled');
            $.ajax({
                url: '/api/user/getUserByUserName/' + currentUserName,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (!!result) {
                        userType = result.UserType;
                        if (userType == 'Administrator' || userType == 'Facility') {
                            if (!!document.getElementById('editButton')) document.getElementById('editButton').removeAttribute('disabled');
                            if (!!document.getElementById('deleteButton')) document.getElementById('deleteButton').removeAttribute('disabled');
                            if (!!document.getElementById('addButton')) document.getElementById('addButton').removeAttribute('disabled');
                        } else if (userType == 'Doctor') {
                            if (!!document.getElementById('editButton')) document.getElementById('editButton').removeAttribute('disabled');
                        }
                    }
                }
            });
        }

        function lockElement(element) {
            if (userType == 'Administrator' || userType == 'Facility') {
                return "";
            } else if (userType == 'Doctor') {
                if (element == 'editButton') {
                    return "";
                } else {
                    return "disabled";
                }
            } else {
                return "disabled";
            }
        }

        window.onload = function () {
            // Secure Page
            currentUserName = '@User.Identity.Name';
            lockPage();

            NProgress.start();
            procedureCollectionView = new wijmo.collections.CollectionView(getProcedureData());
            procedureCollectionView.canFilter = true;
            procedureCollectionView.pageSize = 15;

            var filterText = '';
            $('#inputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                procedureCollectionView.refresh();
            });

            procedureCollectionView.filter = function (item) {
                return !filterText || (item.TransactionNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.PatientName.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Gender.toLowerCase().indexOf(filterText) > -1)
                                   || (item.BodyPart.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Modality.toLowerCase().indexOf(filterText) > -1)
                                   || (item.User.toLowerCase().indexOf(filterText) > -1);
            }

            procedureCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtons();
            });

            // Flex Grid
            procedureFlexGrid = new wijmo.grid.FlexGrid('#procedureFlexGrid');
            procedureFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Tx Number",
                                "binding": "TransactionNumber",
                                "allowSorting": true,
                                "width": "1.5*",
                            },
                            {
                                "header": "Tx Date",
                                "binding": "TransactionDateTime",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Tx Time",
                                "binding": "TransactionTime",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Patient",
                                "binding": "PatientName",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Gender",
                                "binding": "Gender",
                                "allowSorting": true,
                                "width": "0.7*",
                            },
                            {
                                "header": "Age",
                                "binding": "Age",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Exam Taken",
                                "binding": "Modality",
                                "allowSorting": true,
                                "width": "1.2*",
                            },
                            {
                                "header": "Body Part",
                                "binding": "BodyPart",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Doctor",
                                "binding": "Doctor",
                                "allowSorting": true,
                                "width": "2*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: procedureCollectionView,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            procedureFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtons();

            btnFirstPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToFirstPage();
                updateNavigateButtons();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToPreviousPage();
                updateNavigateButtons();
            });
            btnNextPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToNextPage();
                updateNavigateButtons();
            });
            btnLastPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToLastPage();
                updateNavigateButtons();
            });

            getUserFacilityData();
        }

    </script>
</body>
</html>
