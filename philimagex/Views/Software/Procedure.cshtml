<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DMTiPACS - Procedure</title>

    <!-- Styles  -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <!-- Navbar -->
    @Html.Partial("HomeHeader")

    <!-- Section Side -->
    <section class="software-section">
        <div class="container">
            <nav class="navbar navbar-default">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#" onclick="btnDashboardOnclick()">Dashboard</a>
                </div>
                <div class="collapse navbar-collapse" id="myNavbar">
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="#" onclick="btnModalityProcedureOnclick()">Modality Procedure</a></li>
                        <li><a href="#" onclick="btnBodyPartsOnclick()">Body Parts</a></li>
                        <li><a href="#" onclick="btnUserOnclick()">User</a></li>
                        <li><a href="#" onclick="btnRateOnclick()">Rate</a></li>
                        <li class="active"><a href="#" onclick="btnProcedureOnclick()">Procedure</a></li>
                        <li><a href="#" onclick="btnReportsOnclick()">Reports</a></li>
                    </ul>
                </div>
            </nav>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <table style="width: 100%" border="0">
                        <tr>
                            <td>
                                <h4>Procedures</h4>
                            </td>
                            <td align="right">
                                <i class="fa fa-hospital-o fa-fw"></i> Facility: &nbsp;  <b><span id="defaultFacility"></span></b>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control" id="inputFilter" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="input-group">
                                <span class="input-group-addon">Date Start:</span>
                                <div id="cboDateStart"></div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="input-group">
                                <span class="input-group-addon">Date End:</span>
                                <div id="cboDateEnd"></div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <button id="addButton" class="btn btn-primary pull-right" onclick="btnAddProcedureOnclick()"><i class="fa fa-plus fa-fw"></i>Add</button>
                        </div>
                    </div>

                    @*<table style="width: 100%" border="0">
                        <tr>
                            <td style="width: 50%">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inputFilter" placeholder="Search">
                                </div>
                            </td>
                            <td style="width: 50%" align="right">
                                <button id="addButton" class="btn btn-primary" onclick="btnAddProcedureOnclick()"><i class="fa fa-plus fa-fw"></i>Add</button>
                            </td>
                        </tr>
                    </table>*@
                </div>
                <div class="panel-body">
                    <div id="procedureFlexGrid" class="grid"></div>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGrid">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- delete confirmation procedure modal -->
    <div class="modal fade" id="deleteConfirmationProcedureModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Procedure</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Procedure?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="btnConfirmDeleteProcedure" onclick="btnConfirmDeleteProcedureOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnCloseDeleteProcedureModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    @*Modal Procedure Detail*@
    <div class="modal" id="ModalProcedureDetail" role="dialog">
        <div class="modal-dialog" style="width: 1100px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                        &times;
                    </button>
                    <h4 id="ModalProcedureDetailTitle" class="modal-title">Procedure Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="row" id="procedureDetailTabs">
                        <ul class="nav nav-tabs">
                            <li class="active"><a data-toggle="tab" href="#ProcedureInformation">Procedure</a></li>
                            <li><a data-toggle="tab" href="#ProcedureParticulars">Particulars</a></li>
                            <li><a data-toggle="tab" href="#ProcedureOtherInformation">Other Information</a></li>
                            <li><a data-toggle="tab" href="#ProcedureDicomFile">DICOM File</a></li>
                            <li><a data-toggle="tab" href="#ProcedureHistory">History</a></li>
                        </ul>
                        <div class="tab-content">
                            <div id="ProcedureInformation" class="tab-pane active">
                                <div class="col-lg-6">
                                    <dl class="dl-horizontal">
                                        <dt>Transaction Number</dt>
                                        <dd><input type="text" class="form-control requiredProcedure" id="procedureTransactionNumber" placeholder="Transaction Number" disabled /></dd>
                                        <dt>Transaction Date</dt>
                                        <dd><input type="text" class="form-control" id="procedureTransactionDateTime" placeholder="Transaction Date" disabled /></dd>
                                        <dt>Transaction Time</dt>
                                        <dd><input type="text" class="form-control" id="procedureTransactionTime" placeholder="Transaction Time" disabled /></dd>
                                        <dt>Exam Taken</dt>
                                        <dd><input type="text" class="form-control" id="procedureExamTaken" placeholder="Exam Taken" disabled /></dd>
                                        <dt>Body Part</dt>
                                        <dd><input type="text" class="form-control" id="procedureBodyPart" placeholder="Body Part" disabled /></dd>
                                    </dl>
                                </div>
                                <div class="col-lg-6">
                                    <dl class="dl-horizontal">
                                        <dt>Patient</dt>
                                        <dd><input type="text" class="form-control requiredProcedure" id="procedurePatient" placeholder="Patient" disabled /></dd>
                                        <dt>Gender</dt>
                                        <dd><input type="text" class="form-control" id="procedureGender" placeholder="Gender" disabled /></dd>
                                        <dt>Date of Birth</dt>
                                        <dd><input type="text" class="form-control" id="procedureDateOfBirth" placeholder="Date of Birth" disabled /></dd>
                                        <dt>Age</dt>
                                        <dd><input type="text" class="form-control requiredProcedure" id="procedureAge" placeholder="Age" disabled /></dd>

                                    </dl>
                                </div>
                                <div class="col-lg-12">
                                    <span class="pull-right"><button class="btn btn-primary" id="addResultButton" onclick="btnAddProcedureResultOnclick()" disabled><i class="fa fa-plus fa-fw"></i>Add Result</button></span>
                                </div>
                                <div class="col-lg-12">
                                    &nbsp;
                                </div>
                                <div class="col-lg-12">
                                    <div id="procedureResultFlexGrid" class="grid"></div>
                                </div>
                            </div>
                            <div id="ProcedureParticulars" class="tab-pane">
                                <div class="col-lg-12">
                                    <dl class="dl-horizontal">
                                        <dt>Particulars</dt>
                                        <dd><textarea class="form-control requiredProcedure" rows="10" id="procedureParticulars" placeholder="Particulars" disabled></textarea></dd>
                                    </dl>
                                </div>
                            </div>
                            <div id="ProcedureOtherInformation" class="tab-pane">
                                <div class="col-lg-6">
                                    <dl class="dl-horizontal">
                                        <dt>Study Date</dt>
                                        <dd><input type="text" class="form-control" id="procedureStudyDate" placeholder="Study Date" disabled /></dd>
                                        <dt>Patient Address</dt>
                                        <dd><input type="text" class="form-control" id="procedurePatientAddress" placeholder="Patient Address" disabled /></dd>
                                        <dt>Referring Physician</dt>
                                        <dd><input type="text" class="form-control" id="procedureReferringPhysician" placeholder="Referring Physician" disabled /></dd>
                                        <dt>Hospital Number</dt>
                                        <dd><input type="text" class="form-control" id="procedureHospitalNumber" placeholder="Hospital Number" disabled /></dd>
                                        <dt>Hospital Ward Number</dt>
                                        <dd><input type="text" class="form-control" id="procedureHospitalWardNumber" placeholder="Hospital Ward Number" disabled /></dd>
                                    </dl>
                                </div>
                            </div>
                            <div id="ProcedureDicomFile" class="tab-pane">
                                <div class="col-lg-12">
                                    <dl class="dl-horizontal">
                                        <dt>DICOM File</dt>
                                        <dd><textarea class="form-control requiredProcedure" rows="10" id="procedureDICOMFile" placeholder="DICOM File" disabled></textarea></dd>
                                    </dl>
                                </div>
                            </div>
                            <div id="ProcedureHistory" class="tab-pane">
                                <div class="col-lg-12">
                                    &nbsp;
                                </div>
                                <div class="col-lg-12">
                                    <span class="pull-left"><button class="btn btn-success" id="btnViewProcedureAllDicom" onclick="btnViewProcedureAllDicomOnClick()"><i class="fa fa-eye fa-fw"></i>View All Images</button> - To view all images including historical studies for this patient.</span>
                                </div>
                                <div class="col-lg-12">
                                    &nbsp;
                                </div>
                                <div class="col-lg-12">
                                    <div id="procedureComparativeFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="btnViewProcedureDicom" onclick="btnViewProcedureDicomOnClick()">
                        <i class="fa fa-eye fa-fw"></i> View Image
                    </button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">
                        <i class="fa fa-close fa-fw"></i> Close
                    </button>
                </div>
            </div>
        </div>
    </div>

    @*Modal Procedure Result Detail*@
    <div class="modal fade" id="ModalProcedureResultDetail" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Procedure Result Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Procedure</label><br />
                        <div id="cboModalityProcedure" style="width: 100%"></div>
                    </div>
                    <div class="form-group">
                        <label>Result</label><br />
                        <textarea class="form-control requireProcedureResult" rows="10" id="procedureResult" placeholder="Result"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Doctor</label><br />
                        <div id="cboDoctor" style="width: 100%"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveProcedureResult" onclick="btnSaveProcedureResultOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCancelProcedureResult" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation procedure result modal -->
    <div class="modal fade" id="deleteConfirmationProcedureResultModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Result</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Procedure Result?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="btnConfirmDeleteProcedureResult" onclick="btnConfirmDeleteProcedureResultOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnConfirmCloseProcedureResult" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/utilities")
    <script type="text/javascript">
        // global variables
        var procedureCollectionView;
        var procedureFlexGrid;

        var procedureResultCollectionView;
        var procedureResultFlexGrid;

        var procedureComparativeCollectionView;
        var procedureComparativeFlexGrid;

        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;

        var currentUserName;
        var userType;

        var cboModalityProcedure;
        var cboDoctor;

        var procedureResultId;

        var cboDateStart;
        var cboDateEnd;

        // create cbo Date Start
        function createCboDateStart() {
            cboDateStart = new wijmo.input.InputDate('#cboDateStart', {
                format: 'yyyy-MM-dd',
                value: new Date(), //new Date(Date.now() + -1*24*3600*1000),
                mask: '9999-99-99',
                onValueChanged: function () {
                    makeProcedureGrid(cboDateStart.text, cboDateEnd.text);
                }
            });
        }

        // create cbo Date End
        function createCboDateEnd() {
            cboDateEnd = new wijmo.input.InputDate('#cboDateEnd', {
                format: 'yyyy-MM-dd',
                value: new Date(),
                mask: '9999-99-99',
                onValueChanged: function () {
                    makeProcedureGrid(cboDateStart.text, cboDateEnd.text);
                }
            });
        }

        // get procedure
        function getProcedureData(dateStart, dateEnd) {
            NProgress.start();
            var procedureArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/procedure/listByFacilityId/' + getUrlParameter("facilityId") + "?DateStart=" + dateStart + "&DateEnd=" + dateEnd,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (procedureListResult) {
                    if (procedureListResult.length > 0) {
                        for (i = 0; i < procedureListResult.length; i++) {
                            var txDate = new Date(procedureListResult[i]["TransactionDateTime"]);

                            procedureArray.push({
                                ViewButton: "<button id='viewButton' class='btn btn-primary btn-xs btn-block' onclick='btnViewProcedureOnclick()' " + lockElement('viewButton') + "><i class='fa fa-eye fa-fw'></i> View</button>",
                                EditButton: "<button id='editButton' class='btn btn-primary btn-xs btn-block' onclick='btnEditProcedureOnclick()' " + lockElement('editButton') + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button id-'deleteButton' class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteProcedureOnclick()' " + lockElement('deleteButton') + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: procedureListResult[i]["Id"],
                                TransactionNumber: procedureListResult[i]["TransactionNumber"],
                                TransactionDateTime: DateFormat(txDate),
                                TransactionTime: ConvertTimeformat('00:00', procedureListResult[i]["TransactionTime"]),
                                DICOMFileName: procedureListResult[i]["DICOMFileName"],
                                PatientName: procedureListResult[i]["PatientName"].toUpperCase(),
                                Gender: procedureListResult[i]["Gender"],
                                DateOfBirth: procedureListResult[i]["DateOfBirth"],
                                Age: procedureListResult[i]["Age"],
                                Particulars: procedureListResult[i]["Particulars"],
                                ModalityId: procedureListResult[i]["ModalityId"],
                                Modality: procedureListResult[i]["Modality"],
                                BodyPartId: procedureListResult[i]["BodyPartId"],
                                BodyPart: procedureListResult[i]["BodyPart"],
                                UserId: procedureListResult[i]["UserId"],
                                User: procedureListResult[i]["User"],
                                Doctor: procedureListResult[i]["Doctor"],
                                StudyDate: procedureListResult[i]["StudyDate"],
                                PatientAddress: procedureListResult[i]["PatientAddress"],
                                ReferringPhysician: procedureListResult[i]["ReferringPhysician"],
                                HospitalNumber: procedureListResult[i]["HospitalNumber"],
                                HospitalWardNumber: procedureListResult[i]["HospitalWardNumber"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return procedureArray;
        }

        // make procedure grid
        function makeProcedureGrid(dateStart, dateEnd) {
            procedureCollectionView = new wijmo.collections.CollectionView(getProcedureData(dateStart, dateEnd));
            procedureCollectionView.canFilter = true;
            procedureCollectionView.pageSize = 15;

            var filterText = '';
            $('#inputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                procedureCollectionView.refresh();
            });


            procedureCollectionView.filter = function (item) {
                return !filterText || (item.TransactionNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.PatientName.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Gender.toLowerCase().indexOf(filterText) > -1)
                                   || (item.BodyPart.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Modality.toLowerCase().indexOf(filterText) > -1)
                                   || (item.User.toLowerCase().indexOf(filterText) > -1);
            }

            procedureCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtons();
            });

            procedureFlexGrid.dispose();
            procedureFlexGrid = new wijmo.grid.FlexGrid('#procedureFlexGrid');
            procedureFlexGrid.initialize({
                columns: [
                            {
                                "header": "View",
                                "binding": "ViewButton",
                                "width": 75,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            }, {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 75,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 75,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Tx Number",
                                "binding": "TransactionNumber",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Date",
                                "binding": "TransactionDateTime",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Time",
                                "binding": "TransactionTime",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Patient",
                                "binding": "PatientName",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Gender",
                                "binding": "Gender",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Age",
                                "binding": "Age",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Mod",
                                "binding": "Modality",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Body Part",
                                "binding": "BodyPart",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Doctor",
                                "binding": "Doctor",
                                "allowSorting": true,
                                "width": "0.8*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: procedureCollectionView,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            procedureFlexGrid.trackChanges = true;

            // Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtons();
        }

        // get procedure result
        function getProcedureResultData(Id) {
            var procedureResultArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + Id,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (procedureResultListResult) {
                    if (procedureResultListResult.length > 0) {
                        for (i = 0; i < procedureResultListResult.length; i++) {
                            procedureResultArray.push({
                                EditButton: "<button id='editResultButton' class='btn btn-primary btn-xs btn-block' onclick='btnEditProcedureResultOnclick()' " + lockElement('editResultButton') + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button id='deleteResultButton' class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteProcedureResultOnclick()' " + lockElement('deleteResultButton') + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                PrintButton: "<button id='printResultButton' class='btn btn-primary btn-xs btn-block' onclick='btnPrintProcedureResultOnclick(" + procedureResultListResult[i]["Id"] + ")' " + lockElement('printResultButton') + "><i class='fa fa-print fa-fw'></i> Print</button>",
                                Id: procedureResultListResult[i]["Id"],
                                ProcedureId: procedureResultListResult[i]["ProcedureId"],
                                ModalityProcedureId: procedureResultListResult[i]["ModalityProcedureId"],
                                ModalityProcedure: procedureResultListResult[i]["ModalityProcedure"],
                                Result: procedureResultListResult[i]["Result"],
                                DoctorId: procedureResultListResult[i]["DoctorId"],
                                Doctor: procedureResultListResult[i]["Doctor"],
                                DoctorDateTime: procedureResultListResult[i]["DoctorDateTime"],
                                DoctorTime: procedureResultListResult[i]["DoctorTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return procedureResultArray;
        }

        // get procedure comparative
        function getProcedureComparativeData(Id) {
            NProgress.start();
            var procedureComparativeArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/procedure/getComparativeProcedureById/' + Id + '/' + getUrlParameter("facilityId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (procedureListResult) {
                    if (procedureListResult.length > 0) {
                        for (i = 0; i < procedureListResult.length; i++) {
                            var txDate = new Date(procedureListResult[i]["TransactionDateTime"]);
                            procedureComparativeArray.push({
                                Id: procedureListResult[i]["Id"],
                                TransactionNumber: procedureListResult[i]["TransactionNumber"],
                                TransactionDateTime: DateFormat(txDate),
                                TransactionTime: ConvertTimeformat('00:00', procedureListResult[i]["TransactionTime"]),
                                DICOMFileName: procedureListResult[i]["DICOMFileName"],
                                PatientName: procedureListResult[i]["PatientName"].toUpperCase(),
                                Gender: procedureListResult[i]["Gender"],
                                DateOfBirth: procedureListResult[i]["DateOfBirth"],
                                Age: procedureListResult[i]["Age"],
                                Particulars: procedureListResult[i]["Particulars"],
                                ModalityId: procedureListResult[i]["ModalityId"],
                                Modality: procedureListResult[i]["Modality"],
                                BodyPartId: procedureListResult[i]["BodyPartId"],
                                BodyPart: procedureListResult[i]["BodyPart"],
                                UserId: procedureListResult[i]["UserId"],
                                User: procedureListResult[i]["User"],
                                Doctor: procedureListResult[i]["Doctor"],
                                StudyDate: procedureListResult[i]["StudyDate"],
                                PatientAddress: procedureListResult[i]["PatientAddress"],
                                ReferringPhysician: procedureListResult[i]["ReferringPhysician"],
                                HospitalNumber: procedureListResult[i]["HospitalNumber"],
                                HospitalWardNumber: procedureListResult[i]["HospitalWardNumber"]
                            });
                        }
                    }
                    NProgress.done();
                }
            });
            return procedureComparativeArray;
        }

        // get modality procedure data
        function getModalityProcedureData() {
            var modalityProcedureArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/modalityProcedure/listByUserName/' + currentUserName,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (modalityProcedureListResult) {
                    var disabled = false;
                    if (modalityProcedureListResult.length > 0) {
                        for (i = 0; i < modalityProcedureListResult.length; i++) {
                            modalityProcedureArray.push({
                                Id: modalityProcedureListResult[i]["Id"],
                                ModalityProcedure: modalityProcedureListResult[i]["ModalityProcedure"],
                                ModalityResultTemplate: modalityProcedureListResult[i]["ModalityResultTemplate"],
                            });
                        }
                        disabled = false;
                    } else {
                        disabled = true;
                    }

                    cboModalityProcedure.dispose();
                    cboModalityProcedure = new wijmo.input.ComboBox('#cboModalityProcedure', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: modalityProcedureArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "ModalityProcedure",
                        selectedValuePath: "ModalityProcedure",
                        onSelectedIndexChanged: function () {
                            document.getElementById("procedureResult").value = this.selectedItem["ModalityResultTemplate"]
                        }
                    });
                }
            });
        }

        // get get doctor data
        function getDoctorData() {
            var doctorArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/userDoctor/listByUserId',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (doctorListResult) {
                    var disabled = false;
                    if (doctorListResult.length > 0) {
                        for (i = 0; i < doctorListResult.length; i++) {
                            doctorArray.push({
                                Id: doctorListResult[i]["Id"],
                                DoctorId: doctorListResult[i]["DoctorId"],
                                Doctor: doctorListResult[i]["Doctor"],
                            });
                        }
                        disabled = false;
                    } else {
                        disabled = true;
                    }

                    cboDoctor.dispose();
                    cboDoctor = new wijmo.input.ComboBox('#cboDoctor', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: doctorArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Doctor",
                        selectedValuePath: "Doctor"
                    });
                }
            });
        }

        // update procedure data
        function updateProcedureListData(Id) {
            $.ajax({
                url: '/api/procedure/getById/' + Id + "/" + getUrlParameter("facilityId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (procedureDetailResult) {
                    if (procedureDetailResult != null) {
                        procedureCollectionView.editItem(procedureCollectionView.currentItem);
                        var currentItem = procedureCollectionView.currentEditItem;
                        currentItem.Doctor = procedureDetailResult.Doctor;
                        procedureFlexGrid.collectionView.refresh();
                        procedureFlexGrid.invalidate();
                    } 
                }
            });
        }

        // make procedure result grid
        function makeProcedureResultGrid(Id) {
            procedureResultCollectionView = new wijmo.collections.CollectionView(getProcedureResultData(Id));
            procedureResultCollectionView.pageSize = 15;

            procedureResultFlexGrid.dispose();
            procedureResultFlexGrid = new wijmo.grid.FlexGrid('#procedureResultFlexGrid');
            procedureResultFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 75,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Print",
                                "binding": "PrintButton",
                                "width": 75,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 75,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Procedure",
                                "binding": "ModalityProcedure",
                                "allowSorting": true,
                                "width": "1.5*",
                            },
                            {
                                "header": "Result",
                                "binding": "Result",
                                "allowSorting": true,
                                "width": "3*",
                            },
                            {
                                "header": "Doctor",
                                "binding": "Doctor",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Date",
                                "binding": "DoctorDateTime",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Time",
                                "binding": "DoctorTime",
                                "allowSorting": true,
                                "width": "1*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: procedureResultCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            procedureResultFlexGrid.trackChanges = true;
        }

        // make procedure comparative grid
        function makeProcedureComparativeGrid(Id) {
            procedureComparativeCollectionView = new wijmo.collections.CollectionView(getProcedureComparativeData(Id));
            procedureComparativeCollectionView.pageSize = 15;

            procedureComparativeFlexGrid.dispose();
            procedureComparativeFlexGrid = new wijmo.grid.FlexGrid('#procedureComparativeFlexGrid');
            procedureComparativeFlexGrid.initialize({
                columns: [
                            {
                                "header": "Tx Number",
                                "binding": "TransactionNumber",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Date",
                                "binding": "TransactionDateTime",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Time",
                                "binding": "TransactionTime",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Patient",
                                "binding": "PatientName",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Gender",
                                "binding": "Gender",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Age",
                                "binding": "Age",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Mod",
                                "binding": "Modality",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Body Part",
                                "binding": "BodyPart",
                                "allowSorting": true,
                                "width": "0.5*",
                            },
                            {
                                "header": "Doctor",
                                "binding": "Doctor",
                                "allowSorting": true,
                                "width": "0.8*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: procedureComparativeCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            procedureComparativeFlexGrid.trackChanges = true;
        }

        // date formating in grid
        var date;
        function DateFormat(date) {
            function pad(n) { return n < 10 ? '0' + n : n }
            return date.getUTCFullYear() + '-'
            + pad(date.getMonth() + 1) + '-'
            + pad(date.getDate())
        }

        // convert time format
        function ConvertTimeformat(format, str) {
            var hours = Number(str.match(/^(\d+)/)[1]);
            var minutes = Number(str.match(/:(\d+)/)[1]);
            var AMPM = str.match(/\s?([AaPp][Mm]?)$/)[1];
            var pm = ['P', 'p', 'PM', 'pM', 'pm', 'Pm'];
            var am = ['A', 'a', 'AM', 'aM', 'am', 'Am'];
            if (pm.indexOf(AMPM) >= 0 && hours < 12) hours = hours + 12;
            if (am.indexOf(AMPM) >= 0 && hours == 12) hours = hours - 12;
            var sHours = hours.toString();
            var sMinutes = minutes.toString();
            if (hours < 10) sHours = "0" + sHours;
            if (minutes < 10) sMinutes = "0" + sMinutes;
            if (format == '0000') {
                return (sHours + sMinutes);
            } else if (format == '00:00') {
                return (sHours + ":" + sMinutes);
            } else {
                return false;
            }
        }

        // Add procedure
        function btnAddProcedureOnclick() {
            //document.getElementById("#addButton").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Adding";
            //$("#addButton").prop("disabled", true);

            $.ajax({
                type: "POST",
                url: '/api/procedure/add',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (id) {
                    if (id > 0) {
                        window.location = "/Software/ProcedureDetail?facilityId=" + getUrlParameter("facilityId") + "&id=" + id;
                    } else {
                        toastr.error("Internal Server Error");
                    }
                }
            });
        }

        // Edit procedure
        function btnEditProcedureOnclick() {
            procedureCollectionView.editItem(procedureCollectionView.currentItem);
            var currentItem = procedureCollectionView.currentEditItem;

            window.location = "/Software/ProcedureDetail?facilityId=" + getUrlParameter("facilityId") + "&id=" + currentItem.Id;
        }

        // delete procedure
        function btnDeleteProcedureOnclick() {
            var procedureId = procedureCollectionView.currentItem.Id;
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + procedureId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.length > 0) {
                        toastr.error("Delete not allowed");
                    } else {
                        $("#deleteConfirmationProcedureModal").modal({
                            "show": true,
                            "backdrop": "static"
                        });

                        document.getElementById("btnConfirmDeleteProcedure").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedure").prop("disabled", false);
                        $("#btnCloseDeleteProcedureModal").prop("disabled", false);
                    }
                },
                fail: function () {
                    toastr.error("Error deleting.");
                }
            });
        }

        // confirm delete procedure
        function btnConfirmDeleteProcedureOnclick() {
            document.getElementById("btnConfirmDeleteProcedure").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteProcedure").prop("disabled", true);
            $("#btnCloseDeleteProcedureModal").prop("disabled", true);

            procedureCollectionView.editItem(procedureCollectionView.currentItem);
            var currentItem = procedureCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/procedure/delete/' + currentItem.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationProcedureModal").modal("hide");

                        procedureCollectionView = new wijmo.collections.CollectionView(getProcedureData(cboDateStart.text, cboDateEnd.text));
                        procedureCollectionView.canFilter = true;
                        procedureCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#inputFilter').keyup(function () {
                            filterText = this.value.toLowerCase();
                            procedureCollectionView.refresh();
                        });

                        procedureCollectionView.filter = function (item) {
                            return !filterText || (item.TransactionNumber.toLowerCase().indexOf(filterText) > -1)
                                               || (item.PatientName.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Gender.toLowerCase().indexOf(filterText) > -1)
                                               || (item.BodyPart.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Modality.toLowerCase().indexOf(filterText) > -1)
                                               || (item.User.toLowerCase().indexOf(filterText) > -1);
                        }

                        procedureCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtons();
                        });

                        // Flex Grid
                        procedureFlexGrid.itemsSource = procedureCollectionView;
                        procedureFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationProcedureModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedure").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedure").prop("disabled", false);
                        $("#btnCloseDeleteProcedureModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationProcedureModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedure").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedure").prop("disabled", false);
                        $("#btnCloseDeleteProcedureModal").prop("disabled", false);
                    }
                }
            });
        }

        // view procedure
        function btnViewProcedureOnclick() {
            $('#ModalProcedureDetail').modal({
                show: true,
                backdrop: false
            });

            document.getElementById('procedureTransactionNumber').value = procedureCollectionView.currentItem.TransactionNumber;
            document.getElementById('procedureTransactionDateTime').value = procedureCollectionView.currentItem.TransactionDateTime;
            document.getElementById('procedureTransactionTime').value = procedureCollectionView.currentItem.TransactionTime;
            document.getElementById('procedureDICOMFile').value = procedureCollectionView.currentItem.DICOMFileName;
            document.getElementById('procedureExamTaken').value = procedureCollectionView.currentItem.Modality;
            document.getElementById('procedureBodyPart').value = procedureCollectionView.currentItem.BodyPart;
            document.getElementById('procedurePatient').value = procedureCollectionView.currentItem.PatientName;
            document.getElementById('procedureGender').value = procedureCollectionView.currentItem.Gender;
            document.getElementById('procedureDateOfBirth').value = procedureCollectionView.currentItem.DateOfBirth;
            document.getElementById('procedureAge').value = procedureCollectionView.currentItem.Age;
            document.getElementById('procedureParticulars').value = procedureCollectionView.currentItem.Particulars;
            document.getElementById('procedureStudyDate').value = procedureCollectionView.currentItem.StudyDate;
            document.getElementById('procedurePatientAddress').value = procedureCollectionView.currentItem.PatientAddress;
            document.getElementById('procedureReferringPhysician').value = procedureCollectionView.currentItem.ReferringPhysician;
            document.getElementById('procedureHospitalNumber').value = procedureCollectionView.currentItem.HospitalNumber;
            document.getElementById('procedureHospitalWardNumber').value = procedureCollectionView.currentItem.HospitalWardNumber;

            makeProcedureResultGrid(procedureCollectionView.currentItem.Id);
            makeProcedureComparativeGrid(procedureCollectionView.currentItem.Id);
        }

        // view dicom
        function viewDicom(DicomFile) {
            DicomFile = "C" + DicomFile.substring(1, DicomFile.length);

            var DicomFiles = DicomFile.split(';');
            var NumberOfFiles = DicomFiles.length;
           
            var myObject = new ActiveXObject("Scripting.FileSystemObject");
            var files = "";
            var fileDrive = "C";

            // Multiple Files ;;
            if (NumberOfFiles > 1) {
                for (index = 0; index < DicomFiles.length; index++) {
                    DicomFiles[index] = "C" + DicomFiles[index].substring(1, DicomFiles[index].length);
                    if (myObject.FileExists(DicomFiles[index])) {
                        //utilities.runDicomFileC(DicomFiles[index]);
                        files = files + " " + DicomFiles[index];
                    } else {
                        DicomFiles[index] = "D" + DicomFiles[index].substring(1, DicomFiles[index].length);
                        if (myObject.FileExists(DicomFiles[index])) {
                            //utilities.runDicomFileD(DicomFiles[index]);
                            files = files + " " + DicomFiles[index];
                            fileDrive = "D";
                        } else {
                            toastr.error("Cannot find DICOM file.");
                        }
                    }
                }
                if (fileDrive == "C") {
                    utilities.runDicomFileC(files);
                } else {
                    utilities.runDicomFileD(files);
                }

            // Single File (need to rescan the directory)
            } else {
                // get the file drive
                fileDrive = DicomFile.charAt(0);
                if (myObject.FileExists(DicomFile)) {
                    fileDrive = DicomFile.charAt(0);
                } else {
                    if (DicomFile.charAt(0) == "C") {
                        fileDrive = "D";
                    }
                }
                // get the directory
                var path = DicomFile.substring(0, DicomFile.lastIndexOf("\\") + 1);
                // get the files
                var d = myObject.GetFolder(fileDrive + DicomFile.substring(1, path.length));
                var f = new Enumerator(d.files);
                var fc = 0;
                for (; !f.atEnd() ; f.moveNext()) {
                    files = files + " " + f.item();
                    fc++;
                }
                // alert(files);
                // open dicom viewer
                if (fc > 0) {
                    if (fileDrive == "C") utilities.runDicomFileC(files);
                    if (fileDrive == "D") utilities.runDicomFileD(files);
                } else {
                    toastr.error("Cannot find DICOM file.");
                }
                //if (myObject.FileExists(DicomFile)) {
                //    utilities.runDicomFileC(DicomFile);
                //} else {
                //    DicomFile = "D" + DicomFile.substring(1, DicomFile.length);
                //    if (myObject.FileExists(DicomFile)) {
                //        utilities.runDicomFileD(DicomFile);
                //    } else {
                //        toastr.error("Cannot find DICOM file.");
                //    }
                //}
            }
        }

        // view procedure dicom
        function btnViewProcedureDicomOnClick() {
            viewDicom(procedureCollectionView.currentItem.DICOMFileName);
        }

        // view procedure dicom including historical dicom images
        function btnViewProcedureAllDicomOnClick() {
            var dicomString = procedureCollectionView.currentItem.DICOMFileName;
            for (var i = 0; i < procedureComparativeCollectionView.items.length; i++) {
                dicomString = dicomString + ";" + procedureComparativeCollectionView.items[i].DICOMFileName;
            }
            viewDicom(dicomString);
        }

        // print procedure result
        function btnPrintProcedureResultOnclick(Id) {
            if (Id > 0) {
                window.open(
                  '/api/PDF?Report=ProcedureResult&Id=' + Id,
                  '_blank' 
                );
            }
        }

        // open procedure result detail to add
        function btnAddProcedureResultOnclick() {
            $('#ModalProcedureResultDetail').modal({
                show: true,
                backdrop: false
            });

            document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";

            $("#btnSaveProcedureResult").prop("disabled", false);
            $("#btnCancelProcedureResult").prop("disabled", false);

            $('.requireProcedureResult').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            procedureResultId = 0;
            getModalityProcedureData();
            document.getElementById("procedureResult").value = cboModalityProcedure.selectedItem["ModalityResultTemplate"];
            getDoctorData();
        }

        // open procedure result detail to edit
        function btnEditProcedureResultOnclick() {
            var procedureId = procedureCollectionView.currentItem.Id;
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + procedureId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.length > 0) {
                        if (result[0].Doctor == currentUserName) {
                            btnConfirmEditProcedureResultOnclick();
                        } else {
                            toastr.error("Edit not allowed");
                        }
                    } else {
                        toastr.error("Edit not allowed");
                    }
                },
                fail: function () {
                    toastr.error("Error editing.");
                }
            });
        }

        // confirmed edit procedure result
        function btnConfirmEditProcedureResultOnclick() {
            $("#ModalProcedureResultDetail").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
            $("#btnSaveProcedureResult").prop("disabled", false);
            $("#btnCancelProcedureResult").prop("disabled", false);

            $('.requireProcedureResult').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            procedureResultCollectionView.editItem(procedureResultCollectionView.currentItem);
            var currentItem = procedureResultCollectionView.currentEditItem;

            procedureResultId = currentItem.Id;
            cboModalityProcedure.selectedValue = currentItem.ModalityProcedure;
            document.getElementById("procedureResult").value = currentItem.Result;
            cboDoctor.selectedValue = currentItem.Doctor;
        }

        // validated procedure result
        function inputValidationForProcedureResult() {
            var isValid = true;
            $('.requireProcedureResult').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save procedure result
        function btnSaveProcedureResultOnclick() {
            if (inputValidationForProcedureResult()) {
                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving Changes";

                $("#btnSaveProcedureResult").prop("disabled", true);
                $("#btnCancelProcedureResult").prop("disabled", true);

                var procedureResultObject = new Object();
                procedureResultObject.ProcedureId = procedureCollectionView.currentItem.Id;
                procedureResultObject.ModalityProcedureId = cboModalityProcedure.selectedItem["Id"];
                procedureResultObject.Result = document.getElementById('procedureResult').value;
                procedureResultObject.DoctorId = cboDoctor.selectedItem["DoctorId"];
                var procedureResultData = JSON.stringify(procedureResultObject);

                if (procedureResultId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/procedureResult/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: procedureResultData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);

                                makeProcedureResultGrid(procedureCollectionView.currentItem.Id);

                                updateProcedureListData(procedureCollectionView.currentItem.Id);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/procedureResult/update/' + procedureResultId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: procedureResultData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);

                                makeProcedureResultGrid(procedureCollectionView.currentItem.Id);

                                updateProcedureListData(procedureCollectionView.currentItem.Id);
                            },
                            404: function () {
                                toastr.error("Not Found");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");

                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                $("#btnSaveProcedureResult").prop("disabled", false);
                $("#btnCancelProcedureResult").prop("disabled", false);
            }
        }

        // delete procedure result
        function btnDeleteProcedureResultOnclick() {
            var procedureId = procedureCollectionView.currentItem.Id;
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + procedureId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.length > 0) {
                        if (result[0].Doctor == currentUserName) {
                            $("#deleteConfirmationProcedureResultModal").modal({
                                "show": true,
                                "backdrop": "static"
                            });

                            document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "Yes";
                            $("#btnConfirmDeleteProcedureResult").prop("disabled", false);
                            $("#btnConfirmCloseProcedureResult").prop("disabled", false);
                        } else {
                            toastr.error("Delete not allowed");
                        }
                    } else {
                        toastr.error("Delete not allowed");
                    }
                },
                fail: function () {
                    toastr.error("Delete editing.");
                }
            });
        }

        // confirmed delete procedure result
        function btnConfirmDeleteProcedureResultOnclick() {
            document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteProcedureResult").prop("disabled", true);
            $("#btnConfirmCloseProcedureResult").prop("disabled", true);

            procedureResultCollectionView.editItem(procedureResultCollectionView.currentItem);
            var currentItem = procedureResultCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/procedureResult/delete/' + currentItem.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationProcedureResultModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedureResult").prop("disabled", false);
                        $("#btnConfirmCloseProcedureResult").prop("disabled", false);

                        var rowIndex = procedureResultFlexGrid.selection.row;
                        if (rowIndex > -1) {
                            var dataItem = procedureResultFlexGrid.rows[rowIndex].dataItem;
                            if (dataItem) {
                                procedureResultFlexGrid.collectionView.remove(dataItem);
                            }
                        }

                        updateProcedureListData(procedureCollectionView.currentItem.Id);
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationProcedureResultModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedureResult").prop("disabled", false);
                        $("#btnConfirmCloseProcedureResult").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationProcedureResultModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedureResult").prop("disabled", false);
                        $("#btnConfirmCloseProcedureResult").prop("disabled", false);
                    }
                }
            });
        }

        // navigation button for flexgrid
        function updateNavigateButtons() {
            if (procedureCollectionView.pageSize <= 0) {
                document.getElementById('navigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGrid').style.display = 'block';
            if (procedureCollectionView.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (procedureCollectionView.pageIndex === (procedureCollectionView.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (procedureCollectionView.pageIndex + 1) + ' / ' + procedureCollectionView.pageCount;
        }

        function btnDashboardOnclick() {
            window.location = "/Software/Index?facilityId=" + getUrlParameter("facilityId");
        }

        function filterModalityGrid() {
            console.log(filterModality.selectedIndex);
        }

        function btnModalityProcedureOnclick() {
            window.location = "/Software/Modality?facilityId=" + getUrlParameter("facilityId");
        }

        function btnBodyPartsOnclick() {
            window.location = "/Software/BodyParts?facilityId=" + getUrlParameter("facilityId");
        }

        function btnUserOnclick() {
            window.location = "/Software/Users?facilityId=" + getUrlParameter("facilityId");
        }

        function btnRateOnclick() {
            window.location = "/Software/Rate?facilityId=" + getUrlParameter("facilityId");
        }

        function btnProcedureOnclick() {
            window.location = "/Software/Procedure?facilityId=" + getUrlParameter("facilityId");
        }

        function btnReportsOnclick() {
            window.location = "/Software/Reports?facilityId=" + getUrlParameter("facilityId");
        }

        function lockPage() {
            if (!!document.getElementById('editButton')) document.getElementById('editButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('deleteButton')) document.getElementById('deleteButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('addButton')) document.getElementById('addButton').setAttribute('disabled', 'disabled');
            $.ajax({
                url: '/api/user/getUserByUserName/' + currentUserName,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (!!result) {
                        userType = result.UserType;
                        if (userType == 'Administrator' || userType == 'Facility') {
                            if (!!document.getElementById('editButton')) document.getElementById('editButton').removeAttribute('disabled');
                            if (!!document.getElementById('deleteButton')) document.getElementById('deleteButton').removeAttribute('disabled');
                            if (!!document.getElementById('addButton')) document.getElementById('addButton').removeAttribute('disabled');
                        } else if (userType == 'Doctor') {
                            if (!!document.getElementById('editButton')) document.getElementById('editButton').removeAttribute('disabled');
                            if (!!document.getElementById('addResultButton')) document.getElementById('addResultButton').removeAttribute('disabled');
                        }
                    }
                }
            });
        }

        function lockElement(element) {
            if (userType == 'Administrator') {
                return "";
            } else if (userType == 'Facility') {
                if (element == 'editResultButton' || element == 'deleteResultButton') {
                    return "disabled";
                } else {
                    return "";
                }
            } else if (userType == 'Doctor') {
                if (element == 'editButton' || element == 'viewButton' || element == 'editResultButton' || element == 'deleteResultButton' || element == 'printResultButton') {
                    return "";
                } else {
                    return "disabled";
                }
            } else {
                return "disabled";
            }
        }

        window.onload = function () {
            // Secure Page
            currentUserName = '@User.Identity.Name';
            lockPage();

            // Initiate procedure grid
            procedureFlexGrid = new wijmo.grid.FlexGrid('#procedureFlexGrid');

            // Make procedure list
            makeProcedureGrid("NA", "NA");

            // Button listener
            btnFirstPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToFirstPage();
                updateNavigateButtons();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToPreviousPage();
                updateNavigateButtons();
            });
            btnNextPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToNextPage();
                updateNavigateButtons();
            });
            btnLastPageGrid.addEventListener('click', function () {
                procedureCollectionView.moveToLastPage();
                updateNavigateButtons();
            });

            getUserFacilityData();

            // Initiate procedure result grid
            procedureResultFlexGrid = new wijmo.grid.FlexGrid('#procedureResultFlexGrid');

            cboModalityProcedure = new wijmo.input.ComboBox('#cboModalityProcedure');
            cboDoctor = new wijmo.input.ComboBox('#cboDoctor');
            getModalityProcedureData();
            getDoctorData();

            createCboDateStart();
            createCboDateEnd();

            // Initiate procedure comparative grid
            procedureComparativeFlexGrid = new wijmo.grid.FlexGrid('#procedureComparativeFlexGrid');

            // tab event to refresh grid
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                var target = $(e.target).attr("href")
                if (target == '#ProcedureHistory') {
                    makeProcedureComparativeGrid(procedureCollectionView.currentItem.Id);
                }
            });
        }

    </script>
</body>
</html>
