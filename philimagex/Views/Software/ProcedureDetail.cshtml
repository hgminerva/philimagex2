<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DMTiPACS - Procedure Detail</title>

    <!-- Styles  -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <!-- Navbar -->
    @Html.Partial("HomeHeader")

    <!-- Section Side -->
    <section class="software-section">
        <div class="container">
            <nav class="navbar navbar-default">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#" onclick="btnDashboardOnclick()">Dashboard</a>
                </div>
                <div class="collapse navbar-collapse" id="myNavbar">
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="#" onclick="btnModalityProcedureOnclick()">Modality Procedure</a></li>
                        <li><a href="#" onclick="btnBodyPartsOnclick()">Body Parts</a></li>
                        <li><a href="#" onclick="btnUserOnclick()">User</a></li>
                        <li><a href="#" onclick="btnRateOnclick()">Rate</a></li>
                        <li class="active"><a href="#" onclick="btnProcedureOnclick()">Procedure</a></li>
                        <li><a href="#" onclick="btnReportsOnclick()">Reports</a></li>
                    </ul>
                </div>
            </nav>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <table style="width: 100%" border="0">
                        <tr>
                            <td style="width: 50%">
                                <h4>Procedure Detail</h4>
                            </td>
                            <td style="width: 50%" align="right">
                                <i class="fa fa-hospital-o fa-fw"></i> Facility: &nbsp;  <b><span id="defaultFacility"></span></b> &nbsp;&nbsp;&nbsp;&nbsp;  
                                <button class="btn btn-primary" id="viewDicomButton" onclick="btnViewProcedureOnclick()"><i class="fa fa-eye fa-fw"></i> View</button>
                                <button class="btn btn-primary" id="saveProcedureButton" onclick="btnSaveProcedureOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-lg-6">
                            <dl class="dl-horizontal">
                                <dt>Transaction Number</dt>
                                <dd>
                                    <div class="input-group">
                                        <input type="text" class="form-control requiredProcedure" id="procedureTransactionNumber" placeholder="Transaction Number">
                                        <div class="input-group-btn">
                                            <button id="getDicomInfoButton" class="btn btn-primary" onclick="btnExtractDicomInfoOnclick()"><i class="fa fa-hand-o-right"></i></button>
                                        </div>
                                    </div>
                                </dd>
                                <dt>Transaction Date</dt>
                                <dd><input type="text" class="form-control" id="procedureTransactionDateTime" placeholder="Transaction Date" /></dd>
                                <dt>Transaction Time</dt>
                                <dd><input type="text" class="form-control" id="procedureTransactionTime" placeholder="Transaction Time" /></dd>
                                <dt>DICOM File</dt>
                                <dd>
                                    <textarea class="form-control requiredProcedure" rows="10" id="procedureDICOMFile" placeholder="DICOM File"></textarea>
                                </dd>
                                <dt>Exam Taken</dt>
                                <dd><div id="cboExamTaken"></div></dd>
                                <dt>Body Part</dt>
                                <dd><div id="cboBodyPart"></div></dd>
                            </dl>
                        </div>
                        <div class="col-lg-6">
                            <dl class="dl-horizontal">
                                <dt>Patient</dt>
                                <dd><input type="text" class="form-control requiredProcedure" id="procedurePatient" placeholder="Patient" /></dd>
                                <dt>Gender</dt>
                                <dd><div id="cboGender"></div></dd>
                                <dt>Date of Birth</dt>
                                <dd><div id="cboDateOfBirth"></div></dd>
                                <dt>Age</dt>
                                <dd><input type="text" class="form-control requiredProcedure" id="procedureAge" placeholder="Age" /></dd>
                                <dt>Particulars</dt>
                                <dd>
                                    <textarea class="form-control requiredProcedure" rows="10" id="procedureParticulars" placeholder="DICOM File"></textarea>
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4>Result</h4>
                </div>
                <div class="panel-heading">
                    <table style="width: 100%" border="0">
                        <tr>
                            <td style="width: 50%">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inputFilter" placeholder="Search">
                                </div>
                            </td>
                            <td style="width: 50%" align="right">
                                <button class="btn btn-primary" id="addResultButton" onclick="btnAddProcedureResultOnclick()"><i class="fa fa-plus fa-fw"></i>Add</button>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <div id="procedureResultFlexGrid" class="grid"></div>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGrid">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- procedure result detail modal  -->
    <div class="modal fade" id="procedureResultDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Procedure Result Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Procedure</label><br />
                        <div id="cboProcedure" style="width: 100%"></div>
                    </div>
                    <div class="form-group">
                        <label>Result</label><br />
                        <textarea class="form-control requireProcedureResult" rows="10" id="procedureResult" placeholder="Result"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Doctor</label><br />
                        <div id="cboDoctor" style="width: 100%"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveProcedureResult" onclick="btnSaveProcedureResultOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCancelProcedureResult" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation procedure result modal -->
    <div class="modal fade" id="deleteConfirmationProcedureResultModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Result</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Procedure Result?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="btnConfirmDeleteProcedureResult" onclick="btnConfirmDeleteProcedureResultOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnConfirmCloseProcedureResult" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/utilities")
    <script type="text/javascript">
        // global variable
        var currentUserName;
        var userType;

        var cboTransactionDate;
        var cboExamTaken;
        var cboBodyPart;
        var cboGender;
        var cboDateOfBirth;
        var procedureResultCollectionView;
        var procedureResultFlexGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;
        var cboModalityProcedure;
        var cboDoctor;
        var procedureResultId = 0;
        
        function dateFormat(date) {
            function pad(n) { return n < 10 ? '0' + n : n }
            return date.getUTCFullYear() + '-'
            + pad(date.getUTCMonth() + 1) + '-'
            + pad(date.getUTCDate())
        }

        function ConvertTimeformat(format, str) {
            var hours = Number(str.match(/^(\d+)/)[1]);
            var minutes = Number(str.match(/:(\d+)/)[1]);
            var AMPM = str.match(/\s?([AaPp][Mm]?)$/)[1];
            var pm = ['P', 'p', 'PM', 'pM', 'pm', 'Pm'];
            var am = ['A', 'a', 'AM', 'aM', 'am', 'Am'];
            if (pm.indexOf(AMPM) >= 0 && hours < 12) hours = hours + 12;
            if (am.indexOf(AMPM) >= 0 && hours == 12) hours = hours - 12;
            var sHours = hours.toString();
            var sMinutes = minutes.toString();
            if (hours < 10) sHours = "0" + sHours;
            if (minutes < 10) sMinutes = "0" + sMinutes;
            if (format == '0000') {
                return (sHours + sMinutes);
            } else if (format == '00:00') {
                return (sHours + ":" + sMinutes);
            } else {
                return false;
            }
        }

        // get modality data
        function getModalityData() {
            var modalityArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/modality/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (modalityListResult) {
                    var disabled = false;
                    if (modalityListResult.length > 0) {
                        for (i = 0; i < modalityListResult.length; i++) {
                            modalityArray.push({
                                Id: modalityListResult[i]["Id"],
                                Modality: modalityListResult[i]["Modality"],
                            });
                        }
                        disabled = false;
                    } else {
                        disabled = true;
                    }
                    cboExamTaken.dispose();
                    cboExamTaken = new wijmo.input.ComboBox('#cboExamTaken', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: modalityArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Modality",
                        selectedValuePath: "Modality"
                    });
                }
            });
        }

        // get bodyParts data
        function getbodyPartData() {
            cboExamTaken = new wijmo.input.ComboBox('#cboExamTaken');
            getModalityData();
            var bodyPartArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/bodyPart/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (bodyPartListResult) {
                    var disabled = false;
                    if (bodyPartListResult.length > 0) {
                        for (i = 0; i < bodyPartListResult.length; i++) {
                            bodyPartArray.push({
                                Id: bodyPartListResult[i]["Id"],
                                BodyPart: bodyPartListResult[i]["BodyPart"],
                            });
                        }
                        disabled = false;
                    } else {
                        disabled = true;
                    }
                    cboBodyPart.dispose();
                    cboBodyPart = new wijmo.input.ComboBox('#cboBodyPart', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: bodyPartArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "BodyPart",
                        selectedValuePath: "BodyPart"
                    });
                }
            });
        }

        // create CBO Gender
        function createCBOGender() {
            cboBodyPart = new wijmo.input.ComboBox('#cboBodyPart');
            getbodyPartData();
            var genderArray = new Array("M", "F");

            cboGender.dispose();
            cboGender = new wijmo.input.ComboBox('#cboGender', {
                placeholder: "Select",
                itemsSource: genderArray,
                isEditable: false,
                required: true
            });
        }

        // date of birth
        function createCboDateOfBirth() {
            cboGender = new wijmo.input.ComboBox('#cboGender');
            createCBOGender();

            cboDateOfBirth = new wijmo.input.InputDate('#cboDateOfBirth', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {

                }
            });
        }

        // get procedure result
        function getProcedureResultData() {
            var procedureResultArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (procedureResultListResult) {
                    if (procedureResultListResult.length > 0) {
                        for (i = 0; i < procedureResultListResult.length; i++) {
                            procedureResultArray.push({
                                EditButton: "<button id='editResultButton' class='btn btn-primary btn-xs btn-block' onclick='btnEditProcedureResultOnclick()' " + lockElement('editResultButton') + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button id='deleteResultButton' class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteProcedureResultOnclick()' " + lockElement('deleteResultButton') + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                PrintButton: "<button id='printResultButton' class='btn btn-primary btn-xs btn-block' onclick='btnPrintProcedureResultOnclick(" + procedureResultListResult[i]["Id"] + ")' " + lockElement('printResultButton') + "><i class='fa fa-print fa-fw'></i> Print</button>",
                                Id: procedureResultListResult[i]["Id"],
                                ProcedureId: procedureResultListResult[i]["ProcedureId"],
                                ModalityProcedureId: procedureResultListResult[i]["ModalityProcedureId"],
                                ModalityProcedure: procedureResultListResult[i]["ModalityProcedure"],
                                Result: procedureResultListResult[i]["Result"],
                                DoctorId: procedureResultListResult[i]["DoctorId"],
                                Doctor: procedureResultListResult[i]["Doctor"],
                                DoctorDateTime: procedureResultListResult[i]["DoctorDateTime"],
                                DoctorTime: procedureResultListResult[i]["DoctorTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return procedureResultArray;
        }

        // get modality procedure data
        function getModalityProcedureData() {
            var modalityProcedureArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/modalityProcedure/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (modalityProcedureListResult) {
                    var disabled = false;
                    if (modalityProcedureListResult.length > 0) {
                        for (i = 0; i < modalityProcedureListResult.length; i++) {
                            modalityProcedureArray.push({
                                Id: modalityProcedureListResult[i]["Id"],
                                ModalityProcedure: modalityProcedureListResult[i]["ModalityProcedure"],
                                ModalityResultTemplate: modalityProcedureListResult[i]["ModalityResultTemplate"],
                            });
                        }
                        disabled = false;
                    } else {
                        disabled = true;
                    }

                    cboModalityProcedure.dispose();
                    cboModalityProcedure = new wijmo.input.ComboBox('#cboProcedure', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: modalityProcedureArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "ModalityProcedure",
                        selectedValuePath: "ModalityProcedure",
                        onSelectedIndexChanged: function () {
                            document.getElementById("procedureResult").value = this.selectedItem["ModalityResultTemplate"]
                        }
                    });
                }
            });
        }

        // get get doctor data
        function getDoctorData() {
            var doctorArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/userDoctor/listByUserId',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (doctorListResult) {
                    var disabled = false;
                    if (doctorListResult.length > 0) {
                        for (i = 0; i < doctorListResult.length; i++) {
                            doctorArray.push({
                                Id: doctorListResult[i]["Id"],
                                DoctorId: doctorListResult[i]["DoctorId"],
                                Doctor: doctorListResult[i]["Doctor"],
                            });
                        }
                        disabled = false;
                    } else {
                        disabled = true;
                    }

                    cboDoctor.dispose();
                    cboDoctor = new wijmo.input.ComboBox('#cboDoctor', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: doctorArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Doctor",
                        selectedValuePath: "Doctor"
                    });
                }
            });
        }

        // form input validation
        function inputValidationForProcedureResult() {
            var isValid = true;
            $('.requireProcedureResult').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // Extract information from Dicom File
        function btnExtractDicomInfoOnclick() {
            var TransactionNumber = $('#procedureTransactionNumber').val();

            if (TransactionNumber != "") {

                var PatientInfo = utilities.getPatientInfo("C:\\Dropbox\\" + currentUserName + "\\output", TransactionNumber);
                if (PatientInfo.DICOMFileName == "NA") {
                    PatientInfo = utilities.getPatientInfo("D:\\Dropbox\\" + currentUserName + "\\output", TransactionNumber);
                }

                if (PatientInfo.DICOMFileName != "NA") {
                    // Dicom File
                    document.getElementById("procedureDICOMFile").value = PatientInfo.DICOMFileName;
                    // Patient's Name
                    document.getElementById("procedurePatient").value = PatientInfo.PatientName;
                    // Gender
                    cboGender.selectedValue = PatientInfo.Gender;
                    // Date of Birth
                    var DateOfBirth = PatientInfo.BirthDate.substring(4, 6) + "/" + PatientInfo.BirthDate.substring(6) + "/" + PatientInfo.BirthDate.substring(0, 4);
                    cboDateOfBirth.value = new Date(DateOfBirth);
                    // Age
                    document.getElementById("procedureAge").value = Number(PatientInfo.Age.substring(0, 3)).toString();
                } else {
                    toastr.error("Cannot locate DICOM file.");
                }
            }
        }

        // Add procedure result
        function btnAddProcedureResultOnclick() {
            var procedureId = getUrlParameter("id");
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + procedureId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.length > 0) {
                        toastr.error("Add not allowed");
                    } else {
                        openAddProcedureResultModal();
                    }
                },
                fail: function () {
                    toastr.error("Error adding.");
                }
            });
        }

        // Add procedure result - Open Add Modal
        function openAddProcedureResultModal() {
            $("#procedureResultDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("saveResultButton").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveProcedureResult").prop("disabled", false);
            $("#btnCancelProcedureResult").prop("disabled", false);

            $('.requireProcedureResult').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            procedureResultId = 0;
            getModalityProcedureData();
            document.getElementById("procedureResult").value = cboModalityProcedure.selectedItem["ModalityResultTemplate"];
            getDoctorData();
        }

        // save procedure result
        function btnSaveProcedureResultOnclick() {
            if (inputValidationForProcedureResult()) {
                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving Changes";
                $("#btnSaveProcedureResult").prop("disabled", true);
                $("#btnCancelProcedureResult").prop("disabled", true);

                var procedureResultObject = new Object();
                procedureResultObject.ProcedureId = getUrlParameter("id");
                procedureResultObject.ModalityProcedureId = cboModalityProcedure.selectedItem["Id"];
                procedureResultObject.Result = document.getElementById('procedureResult').value;
                procedureResultObject.DoctorId = cboDoctor.selectedItem["DoctorId"];
                var procedureResultData = JSON.stringify(procedureResultObject);

                if (procedureResultId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/procedureResult/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: procedureResultData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#procedureResultDetailModal").modal("hide");

                                procedureResultCollectionView = new wijmo.collections.CollectionView(getProcedureResultData());
                                procedureResultCollectionView.canFilter = true;
                                procedureResultCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#inputFilter').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    procedureResultCollectionView.refresh();
                                });

                                procedureResultCollectionView.filter = function (item) {
                                    return !filterText || (item.ModalityProcedure.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Result.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Doctor.toLowerCase().indexOf(filterText) > -1);
                                }

                                procedureResultCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtons();
                                });

                                // Flex Grid
                                procedureResultFlexGrid.itemsSource = procedureResultCollectionView;
                                procedureResultFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#procedureResultDetailModal").modal("hide");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/procedureResult/update/' + procedureResultId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: procedureResultData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#procedureResultDetailModal").modal("hide");

                                procedureResultCollectionView = new wijmo.collections.CollectionView(getProcedureResultData());
                                procedureResultCollectionView.canFilter = true;
                                procedureResultCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#inputFilter').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    procedureResultCollectionView.refresh();
                                });

                                procedureResultCollectionView.filter = function (item) {
                                    return !filterText || (item.ModalityProcedure.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Result.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Doctor.toLowerCase().indexOf(filterText) > -1);
                                }

                                procedureResultCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtons();
                                });

                                // Flex Grid
                                procedureResultFlexGrid.itemsSource = procedureResultCollectionView;
                                procedureResultFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#procedureResultDetailModal").modal("hide");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#procedureResultDetailModal").modal("hide");

                                document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                                $("#btnSaveProcedureResult").prop("disabled", false);
                                $("#btnCancelProcedureResult").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // edit procedure result
        function btnEditProcedureResultOnclick() {
            var procedureId = getUrlParameter("id");
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + procedureId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.length > 0) {
                        if (result[0].Doctor == currentUserName) {
                            openEditProcedureResultModal();
                        } else {
                            toastr.error("Edit not allowed");
                        }
                    } else {
                        toastr.error("Edit not allowed");
                    }
                },
                fail: function () {
                    toastr.error("Error editing.");
                }
            });
        }

        // edit procedure result - Open Edit Modal
        function openEditProcedureResultModal() {
            $("#procedureResultDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnSaveProcedureResult").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
            $("#btnSaveProcedureResult").prop("disabled", false);
            $("#btnCancelProcedureResult").prop("disabled", false);

            $('.requireProcedureResult').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            procedureResultCollectionView.editItem(procedureResultCollectionView.currentItem);
            var currentItem = procedureResultCollectionView.currentEditItem;

            procedureResultId = currentItem.Id;
            cboModalityProcedure.selectedValue = currentItem.ModalityProcedure;
            document.getElementById("procedureResult").value = currentItem.Result;
            cboDoctor.selectedValue = currentItem.Doctor;
        }

        // delete procedure result
        function btnDeleteProcedureResultOnclick() {
            var procedureId = getUrlParameter("id");
            $.ajax({
                url: '/api/procedureResult/listByProcedureId/' + procedureId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.length > 0) {
                        if (result[0].Doctor == currentUserName) {
                            $("#deleteConfirmationProcedureResultModal").modal({
                                "show": true,
                                "backdrop": "static"
                            });

                            document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "Yes";
                            $("#btnConfirmDeleteProcedureResult").prop("disabled", false);
                            $("#btnConfirmCloseProcedureResult").prop("disabled", false);
                        } else {
                            toastr.error("Delete not allowed");
                        }
                    } else {
                        toastr.error("Delete not allowed");
                    }
                },
                fail: function () {
                    toastr.error("Delete editing.");
                }
            });
        }

        // print procedure result
        function btnPrintProcedureResultOnclick(lineId) {
            if (lineId > 0) {
                window.location.href = '/api/PDF?Report=ProcedureResult&Id=' + lineId;
            }
        }

        // confirm delete procedure result
        function btnConfirmDeleteProcedureResultOnclick() {
            document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteProcedureResult").prop("disabled", true);
            $("#btnConfirmCloseProcedureResult").prop("disabled", true);

            procedureResultCollectionView.editItem(procedureResultCollectionView.currentItem);
            var currentItem = procedureResultCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/procedureResult/delete/' + currentItem.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationProcedureResultModal").modal("hide");

                        procedureResultCollectionView = new wijmo.collections.CollectionView(getProcedureResultData());
                        procedureResultCollectionView.canFilter = true;
                        procedureResultCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#inputFilter').keyup(function () {
                            filterText = this.value.toLowerCase();
                            procedureResultCollectionView.refresh();
                        });

                        procedureResultCollectionView.filter = function (item) {
                            return !filterText || (item.ModalityProcedure.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Result.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Doctor.toLowerCase().indexOf(filterText) > -1);
                        }

                        procedureResultCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtons();
                        });

                        // Flex Grid
                        procedureResultFlexGrid.itemsSource = procedureResultCollectionView;
                        procedureResultFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationProcedureResultModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedureResult").prop("disabled", false);
                        $("#btnConfirmCloseProcedureResult").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationProcedureResultModal").modal("hide");

                        document.getElementById("btnConfirmDeleteProcedureResult").innerHTML = "Yes";
                        $("#btnConfirmDeleteProcedureResult").prop("disabled", false);
                        $("#btnConfirmCloseProcedureResult").prop("disabled", false);
                    }
                }
            });
        }

        // navigation button for flexgrid
        function updateNavigateButtons() {
            if (procedureResultCollectionView.pageSize <= 0) {
                document.getElementById('navigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGrid').style.display = 'block';
            if (procedureResultCollectionView.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (procedureResultCollectionView.pageIndex === (procedureResultCollectionView.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (procedureResultCollectionView.pageIndex + 1) + ' / ' + procedureResultCollectionView.pageCount;
        }

        // procedure Result FlexGrid
        function createProcedureResultFlexGrid() {
            procedureResultCollectionView = new wijmo.collections.CollectionView(getProcedureResultData());
            procedureResultCollectionView.canFilter = true;
            procedureResultCollectionView.pageSize = 15;

            var filterText = '';
            $('#inputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                procedureResultCollectionView.refresh();
            });

            procedureResultCollectionView.filter = function (item) {
                return !filterText || (item.ModalityProcedure.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Result.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Doctor.toLowerCase().indexOf(filterText) > -1);
            }

            procedureResultCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtons();
            });

            // Flex Grid
            procedureResultFlexGrid = new wijmo.grid.FlexGrid('#procedureResultFlexGrid');
            procedureResultFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Print",
                                "binding": "PrintButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Procedure",
                                "binding": "ModalityProcedure",
                                "allowSorting": true,
                                "width": "1.5*",
                            },
                            {
                                "header": "Result",
                                "binding": "Result",
                                "allowSorting": true,
                                "width": "3*",
                            },
                            {
                                "header": "Doctor",
                                "binding": "Doctor",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Date",
                                "binding": "DoctorDateTime",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Time",
                                "binding": "DoctorTime",
                                "allowSorting": true,
                                "width": "1*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: procedureResultCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            procedureResultFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtons();

            btnFirstPageGrid.addEventListener('click', function () {
                procedureResultCollectionView.moveToFirstPage();
                updateNavigateButtons();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                procedureResultCollectionView.moveToPreviousPage();
                updateNavigateButtons();
            });
            btnNextPageGrid.addEventListener('click', function () {
                procedureResultCollectionView.moveToNextPage();
                updateNavigateButtons();
            });
            btnLastPageGrid.addEventListener('click', function () {
                procedureResultCollectionView.moveToLastPage();
                updateNavigateButtons();
            });
        }

        // form input validation
        function inputValidation() {
            var isValid = true;
            $('.requiredProcedure').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // get procedure data
        function getProcedureDetailData() {
            createCboDateOfBirth();
            $.ajax({
                url: '/api/procedure/getById/' + getUrlParameter("id") + "/" + getUrlParameter("facilityId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (procedureDetailResult) {
                    document.getElementById("procedureTransactionDateTime").disabled = true;
                    document.getElementById("procedureTransactionTime").disabled = true;
                    document.getElementById("procedureDICOMFile").disabled = true;
                    if (procedureDetailResult != null) {
                        document.getElementById("procedureTransactionNumber").value = procedureDetailResult.TransactionNumber;
                        var trnDate = new Date(procedureDetailResult.TransactionDateTime);
                        document.getElementById("procedureTransactionDateTime").value = dateFormat(trnDate);
                        document.getElementById("procedureTransactionTime").value = ConvertTimeformat('00:00', procedureDetailResult.TransactionTime);
                        document.getElementById("procedureDICOMFile").value = procedureDetailResult.DICOMFileName;
                        cboExamTaken.selectedValue = procedureDetailResult.Modality;
                        cboBodyPart.selectedValue = procedureDetailResult.BodyPart;
                        document.getElementById("procedurePatient").value = procedureDetailResult.PatientName;
                        cboGender.selectedValue = procedureDetailResult.Gender;
                        cboDateOfBirth.value = new Date(procedureDetailResult.DateOfBirth);
                        document.getElementById("procedureAge").value = procedureDetailResult.Age;
                        document.getElementById("procedureParticulars").value = procedureDetailResult.Particulars;
                        createProcedureResultFlexGrid();
                    } else {
                        alert("The record you'd requested has no data");
                        window.history.back();
                    }
                }
            });
        }

        // Save Procedure
        function btnSaveProcedureOnclick() {
            if (inputValidation()) {
                //document.getElementById("btnSaveProcedure").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                //$("#btnSaveProcedure").prop("disabled", true);
                //$("#btnViewProcedure").prop("disabled", true);
                //$("#btnCloseProcedure").prop("disabled", true);
                //$("#btnAddResult").prop("disabled", true);

                var procedureObject = new Object();
                procedureObject.TransactionNumber = document.getElementById("procedureTransactionNumber").value;
                procedureObject.DICOMFileName = document.getElementById('procedureDICOMFile').value;
                procedureObject.PatientName = document.getElementById('procedurePatient').value;
                procedureObject.Gender = cboGender.selectedValue;
                procedureObject.DateOfBirth = cboDateOfBirth.value;
                procedureObject.Age = document.getElementById('procedureAge').value;
                procedureObject.Particulars = document.getElementById('procedureParticulars').value;
                procedureObject.ModalityId = cboExamTaken.selectedItem["Id"];
                procedureObject.BodyPartId = cboBodyPart.selectedItem["Id"];
                var procedureData = JSON.stringify(procedureObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/procedure/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: procedureData,
                    statusCode: {
                        200: function () {
                            toastr.success("Reloading the page", "Save Successful");
                            window.setTimeout(function () {
                                location.reload();
                            }, 1500);
                        },
                        404: function () {
                            toastr.error("Not Found");

                            document.getElementById("btnSaveProcedure").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnSaveProcedure").prop("disabled", false);
                            $("#btnViewProcedure").prop("disabled", false);
                            $("#btnCloseProcedure").prop("disabled", false);
                            $("#btnAddResult").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");

                            document.getElementById("btnSaveProcedure").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnSaveProcedure").prop("disabled", false);
                            $("#btnViewProcedure").prop("disabled", false);
                            $("#btnCloseProcedure").prop("disabled", false);
                            $("#btnAddResult").prop("disabled", false);
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // Close
        function btnCloseOnclick() {
            window.location = "/Software/Procedure";
        }

        function btnDashboardOnclick() {
            window.location = "/Software/Index?facilityId=" + getUrlParameter("facilityId");
        }

        function btnModalityProcedureOnclick() {
            window.location = "/Software/Modality?facilityId=" + getUrlParameter("facilityId");
        }

        function btnBodyPartsOnclick() {
            window.location = "/Software/BodyParts?facilityId=" + getUrlParameter("facilityId");
        }

        function btnUserOnclick() {
            window.location = "/Software/Users?facilityId=" + getUrlParameter("facilityId");
        }

        function btnRateOnclick() {
            window.location = "/Software/Rate?facilityId=" + getUrlParameter("facilityId");
        }

        function btnProcedureOnclick() {
            window.location = "/Software/Procedure?facilityId=" + getUrlParameter("facilityId");
        }

        function btnReportsOnclick() {
            window.location = "/Software/Reports?facilityId=" + getUrlParameter("facilityId");
        }

        function btnViewProcedureOnclick() {
            var DicomFile = $('#procedureDICOMFile').val();

            DicomFile = "C" + DicomFile.substring(1, DicomFile.length);
            if (DicomFile != "") {
                var DicomFiles = DicomFile.split(';');
                var NumberOfFiles = DicomFiles.length;
                if (NumberOfFiles > 1) {
                    for (index = 0; index < DicomFiles.length; index++) {
                        utilities.runBatchFile(DicomFiles[index]);
                    }
                } else {
                    utilities.runBatchFile(DicomFile);
                }
            } else {
                DicomFile = "D" + DicomFile.substring(1, DicomFile.length);
                if (DicomFile != "") {
                    var DicomFiles = DicomFile.split(';');
                    var NumberOfFiles = DicomFiles.length;
                    if (NumberOfFiles > 1) {
                        for (index = 0; index < DicomFiles.length; index++) {
                            utilities.runBatchFile(DicomFiles[index]);
                        }
                    } else {
                        utilities.runBatchFile(DicomFile);
                    }
                }
            }
        }

        function lockPage() {
            if (!!document.getElementById('getDicomInfoButton')) document.getElementById('getDicomInfoButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('viewDicomButton')) document.getElementById('viewDicomButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('saveProcedureButton')) document.getElementById('saveProcedureButton').setAttribute('disabled', 'disabled');

            if (!!document.getElementById('editResultButton')) document.getElementById('editResultButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('deleteResultButton')) document.getElementById('deleteResultButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('addResultButton')) document.getElementById('addResultButton').setAttribute('disabled', 'disabled');
            if (!!document.getElementById('printResultButton')) document.getElementById('printResultButton').setAttribute('disabled', 'disabled');
            $.ajax({
                url: '/api/user/getUserByUserName/' + currentUserName,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (!!result) {
                        userType = result.UserType;
                        if (userType == 'Administrator') {
                            if (!!document.getElementById('getDicomInfoButton')) document.getElementById('getDicomInfoButton').removeAttribute('disabled');
                            if (!!document.getElementById('viewDicomButton')) document.getElementById('viewDicomButton').removeAttribute('disabled');
                            if (!!document.getElementById('saveProcedureButton')) document.getElementById('saveProcedureButton').removeAttribute('disabled');

                            if (!!document.getElementById('editResultButton')) document.getElementById('editResultButton').removeAttribute('disabled');
                            if (!!document.getElementById('deleteResultButton')) document.getElementById('deleteResultButton').removeAttribute('disabled');
                            if (!!document.getElementById('addResultButton')) document.getElementById('addResultButton').removeAttribute('disabled');
                            if (!!document.getElementById('printResultButton')) document.getElementById('printResultButton').removeAttribute('disabled');
                        } else if (userType == 'Facility') {
                            if (!!document.getElementById('getDicomInfoButton')) document.getElementById('getDicomInfoButton').removeAttribute('disabled');
                            if (!!document.getElementById('viewDicomButton')) document.getElementById('viewDicomButton').removeAttribute('disabled');
                            if (!!document.getElementById('saveProcedureButton')) document.getElementById('saveProcedureButton').removeAttribute('disabled');

                            if (!!document.getElementById('printResultButton')) document.getElementById('printResultButton').removeAttribute('disabled');
                        } else if (userType == 'Doctor') {
                            if (!!document.getElementById('viewDicomButton')) document.getElementById('viewDicomButton').removeAttribute('disabled');

                            if (!!document.getElementById('editResultButton')) document.getElementById('editResultButton').removeAttribute('disabled');
                            if (!!document.getElementById('deleteResultButton')) document.getElementById('deleteResultButton').removeAttribute('disabled');
                            if (!!document.getElementById('addResultButton')) document.getElementById('addResultButton').removeAttribute('disabled');
                            if (!!document.getElementById('printResultButton')) document.getElementById('printResultButton').removeAttribute('disabled');
                        }
                    }
                }
            });
        }

        function lockElement(element) {
            if (userType == 'Administrator') {
                return "";
            } else if(userType == 'Facility') {
                if (element == 'printResultButton') {
                    return "";
                } else {
                    return "disabled";
                }
            } else if (userType == 'Doctor') {
                return "";
            } else {
                return "disabled";
            }
        }

        // on load page
        window.onload = function () {
            currentUserName = '@User.Identity.Name';
            lockPage();

            NProgress.start();
            cboModalityProcedure = new wijmo.input.ComboBox('#cboProcedure');
            cboDoctor = new wijmo.input.ComboBox('#cboDoctor');
            getModalityProcedureData();
            getDoctorData();
            getProcedureDetailData();
            getUserFacilityData();
        }
    </script>
</body>
</html>
