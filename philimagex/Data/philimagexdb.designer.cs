#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace philimagex.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="philimagex")]
	public partial class philimagexdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAspNetRole(AspNetRole instance);
    partial void UpdateAspNetRole(AspNetRole instance);
    partial void DeleteAspNetRole(AspNetRole instance);
    partial void InsertTrnProcedureResult(TrnProcedureResult instance);
    partial void UpdateTrnProcedureResult(TrnProcedureResult instance);
    partial void DeleteTrnProcedureResult(TrnProcedureResult instance);
    partial void InsertAspNetUserClaim(AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(AspNetUserLogin instance);
    partial void InsertAspNetUserRole(AspNetUserRole instance);
    partial void UpdateAspNetUserRole(AspNetUserRole instance);
    partial void DeleteAspNetUserRole(AspNetUserRole instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InsertMstBodyPart(MstBodyPart instance);
    partial void UpdateMstBodyPart(MstBodyPart instance);
    partial void DeleteMstBodyPart(MstBodyPart instance);
    partial void InsertMstModality(MstModality instance);
    partial void UpdateMstModality(MstModality instance);
    partial void DeleteMstModality(MstModality instance);
    partial void InsertMstUser(MstUser instance);
    partial void UpdateMstUser(MstUser instance);
    partial void DeleteMstUser(MstUser instance);
    partial void InsertMstUserDoctor(MstUserDoctor instance);
    partial void UpdateMstUserDoctor(MstUserDoctor instance);
    partial void DeleteMstUserDoctor(MstUserDoctor instance);
    partial void InsertMstUserRate(MstUserRate instance);
    partial void UpdateMstUserRate(MstUserRate instance);
    partial void DeleteMstUserRate(MstUserRate instance);
    partial void InsertMstUserType(MstUserType instance);
    partial void UpdateMstUserType(MstUserType instance);
    partial void DeleteMstUserType(MstUserType instance);
    partial void InsertTrnProcedure(TrnProcedure instance);
    partial void UpdateTrnProcedure(TrnProcedure instance);
    partial void DeleteTrnProcedure(TrnProcedure instance);
    partial void InsertMstModalityProcedure(MstModalityProcedure instance);
    partial void UpdateMstModalityProcedure(MstModalityProcedure instance);
    partial void DeleteMstModalityProcedure(MstModalityProcedure instance);
    #endregion
		
		public philimagexdbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public philimagexdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public philimagexdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public philimagexdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public philimagexdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<TrnProcedureResult> TrnProcedureResults
		{
			get
			{
				return this.GetTable<TrnProcedureResult>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<MstBodyPart> MstBodyParts
		{
			get
			{
				return this.GetTable<MstBodyPart>();
			}
		}
		
		public System.Data.Linq.Table<MstModality> MstModalities
		{
			get
			{
				return this.GetTable<MstModality>();
			}
		}
		
		public System.Data.Linq.Table<MstUser> MstUsers
		{
			get
			{
				return this.GetTable<MstUser>();
			}
		}
		
		public System.Data.Linq.Table<MstUserDoctor> MstUserDoctors
		{
			get
			{
				return this.GetTable<MstUserDoctor>();
			}
		}
		
		public System.Data.Linq.Table<MstUserRate> MstUserRates
		{
			get
			{
				return this.GetTable<MstUserRate>();
			}
		}
		
		public System.Data.Linq.Table<MstUserType> MstUserTypes
		{
			get
			{
				return this.GetTable<MstUserType>();
			}
		}
		
		public System.Data.Linq.Table<TrnProcedure> TrnProcedures
		{
			get
			{
				return this.GetTable<TrnProcedure>();
			}
		}
		
		public System.Data.Linq.Table<MstModalityProcedure> MstModalityProcedures
		{
			get
			{
				return this.GetTable<MstModalityProcedure>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrnProcedureResult")]
	public partial class TrnProcedureResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProcedureId;
		
		private int _ModalityProcedureId;
		
		private string _Result;
		
		private int _DoctorId;
		
		private System.DateTime _DoctorDateTime;
		
		private EntityRef<MstUser> _MstUser;
		
		private EntityRef<TrnProcedure> _TrnProcedure;
		
		private EntityRef<MstModalityProcedure> _MstModalityProcedure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProcedureIdChanging(int value);
    partial void OnProcedureIdChanged();
    partial void OnModalityProcedureIdChanging(int value);
    partial void OnModalityProcedureIdChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnDoctorIdChanging(int value);
    partial void OnDoctorIdChanged();
    partial void OnDoctorDateTimeChanging(System.DateTime value);
    partial void OnDoctorDateTimeChanged();
    #endregion
		
		public TrnProcedureResult()
		{
			this._MstUser = default(EntityRef<MstUser>);
			this._TrnProcedure = default(EntityRef<TrnProcedure>);
			this._MstModalityProcedure = default(EntityRef<MstModalityProcedure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcedureId", DbType="Int NOT NULL")]
		public int ProcedureId
		{
			get
			{
				return this._ProcedureId;
			}
			set
			{
				if ((this._ProcedureId != value))
				{
					if (this._TrnProcedure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcedureIdChanging(value);
					this.SendPropertyChanging();
					this._ProcedureId = value;
					this.SendPropertyChanged("ProcedureId");
					this.OnProcedureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityProcedureId", DbType="Int NOT NULL")]
		public int ModalityProcedureId
		{
			get
			{
				return this._ModalityProcedureId;
			}
			set
			{
				if ((this._ModalityProcedureId != value))
				{
					if (this._MstModalityProcedure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModalityProcedureIdChanging(value);
					this.SendPropertyChanging();
					this._ModalityProcedureId = value;
					this.SendPropertyChanged("ModalityProcedureId");
					this.OnModalityProcedureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int NOT NULL")]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._MstUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DoctorDateTime
		{
			get
			{
				return this._DoctorDateTime;
			}
			set
			{
				if ((this._DoctorDateTime != value))
				{
					this.OnDoctorDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DoctorDateTime = value;
					this.SendPropertyChanged("DoctorDateTime");
					this.OnDoctorDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_TrnProcedureResult", Storage="_MstUser", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true)]
		public MstUser MstUser
		{
			get
			{
				return this._MstUser.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser.Entity;
				if (((previousValue != value) 
							|| (this._MstUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser.Entity = null;
						previousValue.TrnProcedureResults.Remove(this);
					}
					this._MstUser.Entity = value;
					if ((value != null))
					{
						value.TrnProcedureResults.Add(this);
						this._DoctorId = value.Id;
					}
					else
					{
						this._DoctorId = default(int);
					}
					this.SendPropertyChanged("MstUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrnProcedure_TrnProcedureResult", Storage="_TrnProcedure", ThisKey="ProcedureId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrnProcedure TrnProcedure
		{
			get
			{
				return this._TrnProcedure.Entity;
			}
			set
			{
				TrnProcedure previousValue = this._TrnProcedure.Entity;
				if (((previousValue != value) 
							|| (this._TrnProcedure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrnProcedure.Entity = null;
						previousValue.TrnProcedureResults.Remove(this);
					}
					this._TrnProcedure.Entity = value;
					if ((value != null))
					{
						value.TrnProcedureResults.Add(this);
						this._ProcedureId = value.Id;
					}
					else
					{
						this._ProcedureId = default(int);
					}
					this.SendPropertyChanged("TrnProcedure");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModalityProcedure_TrnProcedureResult", Storage="_MstModalityProcedure", ThisKey="ModalityProcedureId", OtherKey="Id", IsForeignKey=true)]
		public MstModalityProcedure MstModalityProcedure
		{
			get
			{
				return this._MstModalityProcedure.Entity;
			}
			set
			{
				MstModalityProcedure previousValue = this._MstModalityProcedure.Entity;
				if (((previousValue != value) 
							|| (this._MstModalityProcedure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstModalityProcedure.Entity = null;
						previousValue.TrnProcedureResults.Remove(this);
					}
					this._MstModalityProcedure.Entity = value;
					if ((value != null))
					{
						value.TrnProcedureResults.Add(this);
						this._ModalityProcedureId = value.Id;
					}
					else
					{
						this._ModalityProcedureId = default(int);
					}
					this.SendPropertyChanged("MstModalityProcedure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _FullName;
		
		private string _UserName;
		
		private string _PasswordHash;
		
		private string _Email;
		
		private System.Nullable<bool> _EmailConfirmed;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private System.Nullable<bool> _PhoneNumberConfirmed;
		
		private System.Nullable<bool> _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private System.Nullable<bool> _LockoutEnabled;
		
		private System.Nullable<int> _AccessFailedCount;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
		private EntitySet<MstUser> _MstUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(System.Nullable<bool> value);
    partial void OnEmailConfirmedChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(System.Nullable<bool> value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(System.Nullable<bool> value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(System.Nullable<bool> value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(System.Nullable<int> value);
    partial void OnAccessFailedCountChanged();
    #endregion
		
		public AspNetUser()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			this._MstUsers = new EntitySet<MstUser>(new Action<MstUser>(this.attach_MstUsers), new Action<MstUser>(this.detach_MstUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit")]
		public System.Nullable<bool> EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit")]
		public System.Nullable<bool> PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit")]
		public System.Nullable<bool> TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit")]
		public System.Nullable<bool> LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int")]
		public System.Nullable<int> AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MstUser", Storage="_MstUsers", ThisKey="Id", OtherKey="AspNetUserId")]
		public EntitySet<MstUser> MstUsers
		{
			get
			{
				return this._MstUsers;
			}
			set
			{
				this._MstUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_MstUsers(MstUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_MstUsers(MstUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstBodyPart")]
	public partial class MstBodyPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BodyPart;
		
		private EntitySet<TrnProcedure> _TrnProcedures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBodyPartChanging(string value);
    partial void OnBodyPartChanged();
    #endregion
		
		public MstBodyPart()
		{
			this._TrnProcedures = new EntitySet<TrnProcedure>(new Action<TrnProcedure>(this.attach_TrnProcedures), new Action<TrnProcedure>(this.detach_TrnProcedures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyPart", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BodyPart
		{
			get
			{
				return this._BodyPart;
			}
			set
			{
				if ((this._BodyPart != value))
				{
					this.OnBodyPartChanging(value);
					this.SendPropertyChanging();
					this._BodyPart = value;
					this.SendPropertyChanged("BodyPart");
					this.OnBodyPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBodyPart_TrnProcedure", Storage="_TrnProcedures", ThisKey="Id", OtherKey="BodyPartId")]
		public EntitySet<TrnProcedure> TrnProcedures
		{
			get
			{
				return this._TrnProcedures;
			}
			set
			{
				this._TrnProcedures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrnProcedures(TrnProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstBodyPart = this;
		}
		
		private void detach_TrnProcedures(TrnProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstBodyPart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstModality")]
	public partial class MstModality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Modality;
		
		private EntitySet<TrnProcedure> _TrnProcedures;
		
		private EntitySet<MstModalityProcedure> _MstModalityProcedures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModalityChanging(string value);
    partial void OnModalityChanged();
    #endregion
		
		public MstModality()
		{
			this._TrnProcedures = new EntitySet<TrnProcedure>(new Action<TrnProcedure>(this.attach_TrnProcedures), new Action<TrnProcedure>(this.detach_TrnProcedures));
			this._MstModalityProcedures = new EntitySet<MstModalityProcedure>(new Action<MstModalityProcedure>(this.attach_MstModalityProcedures), new Action<MstModalityProcedure>(this.detach_MstModalityProcedures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modality", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Modality
		{
			get
			{
				return this._Modality;
			}
			set
			{
				if ((this._Modality != value))
				{
					this.OnModalityChanging(value);
					this.SendPropertyChanging();
					this._Modality = value;
					this.SendPropertyChanged("Modality");
					this.OnModalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModality_TrnProcedure", Storage="_TrnProcedures", ThisKey="Id", OtherKey="ModalityId")]
		public EntitySet<TrnProcedure> TrnProcedures
		{
			get
			{
				return this._TrnProcedures;
			}
			set
			{
				this._TrnProcedures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModality_MstModalityProcedure", Storage="_MstModalityProcedures", ThisKey="Id", OtherKey="ModalityId")]
		public EntitySet<MstModalityProcedure> MstModalityProcedures
		{
			get
			{
				return this._MstModalityProcedures;
			}
			set
			{
				this._MstModalityProcedures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrnProcedures(TrnProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstModality = this;
		}
		
		private void detach_TrnProcedures(TrnProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstModality = null;
		}
		
		private void attach_MstModalityProcedures(MstModalityProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstModality = this;
		}
		
		private void detach_MstModalityProcedures(MstModalityProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstModality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstUser")]
	public partial class MstUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _FullName;
		
		private string _Address;
		
		private string _ContactNumber;
		
		private int _UserTypeId;
		
		private string _AspNetUserId;
		
		private EntitySet<TrnProcedureResult> _TrnProcedureResults;
		
		private EntitySet<MstUserDoctor> _MstUserDoctors;
		
		private EntitySet<MstUserDoctor> _MstUserDoctors1;
		
		private EntitySet<MstUserRate> _MstUserRates;
		
		private EntitySet<TrnProcedure> _TrnProcedures;
		
		private EntitySet<MstModalityProcedure> _MstModalityProcedures;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<MstUserType> _MstUserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnUserTypeIdChanging(int value);
    partial void OnUserTypeIdChanged();
    partial void OnAspNetUserIdChanging(string value);
    partial void OnAspNetUserIdChanged();
    #endregion
		
		public MstUser()
		{
			this._TrnProcedureResults = new EntitySet<TrnProcedureResult>(new Action<TrnProcedureResult>(this.attach_TrnProcedureResults), new Action<TrnProcedureResult>(this.detach_TrnProcedureResults));
			this._MstUserDoctors = new EntitySet<MstUserDoctor>(new Action<MstUserDoctor>(this.attach_MstUserDoctors), new Action<MstUserDoctor>(this.detach_MstUserDoctors));
			this._MstUserDoctors1 = new EntitySet<MstUserDoctor>(new Action<MstUserDoctor>(this.attach_MstUserDoctors1), new Action<MstUserDoctor>(this.detach_MstUserDoctors1));
			this._MstUserRates = new EntitySet<MstUserRate>(new Action<MstUserRate>(this.attach_MstUserRates), new Action<MstUserRate>(this.detach_MstUserRates));
			this._TrnProcedures = new EntitySet<TrnProcedure>(new Action<TrnProcedure>(this.attach_TrnProcedures), new Action<TrnProcedure>(this.detach_TrnProcedures));
			this._MstModalityProcedures = new EntitySet<MstModalityProcedure>(new Action<MstModalityProcedure>(this.attach_MstModalityProcedures), new Action<MstModalityProcedure>(this.detach_MstModalityProcedures));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._MstUserType = default(EntityRef<MstUserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="Int NOT NULL")]
		public int UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					if (this._MstUserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspNetUserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string AspNetUserId
		{
			get
			{
				return this._AspNetUserId;
			}
			set
			{
				if ((this._AspNetUserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAspNetUserIdChanging(value);
					this.SendPropertyChanging();
					this._AspNetUserId = value;
					this.SendPropertyChanged("AspNetUserId");
					this.OnAspNetUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_TrnProcedureResult", Storage="_TrnProcedureResults", ThisKey="Id", OtherKey="DoctorId")]
		public EntitySet<TrnProcedureResult> TrnProcedureResults
		{
			get
			{
				return this._TrnProcedureResults;
			}
			set
			{
				this._TrnProcedureResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstUserDoctor", Storage="_MstUserDoctors", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<MstUserDoctor> MstUserDoctors
		{
			get
			{
				return this._MstUserDoctors;
			}
			set
			{
				this._MstUserDoctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstUserDoctor1", Storage="_MstUserDoctors1", ThisKey="Id", OtherKey="DoctorId")]
		public EntitySet<MstUserDoctor> MstUserDoctors1
		{
			get
			{
				return this._MstUserDoctors1;
			}
			set
			{
				this._MstUserDoctors1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstUserRate", Storage="_MstUserRates", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<MstUserRate> MstUserRates
		{
			get
			{
				return this._MstUserRates;
			}
			set
			{
				this._MstUserRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_TrnProcedure", Storage="_TrnProcedures", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TrnProcedure> TrnProcedures
		{
			get
			{
				return this._TrnProcedures;
			}
			set
			{
				this._TrnProcedures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstModalityProcedure", Storage="_MstModalityProcedures", ThisKey="Id", OtherKey="DoctorId")]
		public EntitySet<MstModalityProcedure> MstModalityProcedures
		{
			get
			{
				return this._MstModalityProcedures;
			}
			set
			{
				this._MstModalityProcedures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MstUser", Storage="_AspNetUser", ThisKey="AspNetUserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.MstUsers.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.MstUsers.Add(this);
						this._AspNetUserId = value.Id;
					}
					else
					{
						this._AspNetUserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUserType_MstUser", Storage="_MstUserType", ThisKey="UserTypeId", OtherKey="Id", IsForeignKey=true)]
		public MstUserType MstUserType
		{
			get
			{
				return this._MstUserType.Entity;
			}
			set
			{
				MstUserType previousValue = this._MstUserType.Entity;
				if (((previousValue != value) 
							|| (this._MstUserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUserType.Entity = null;
						previousValue.MstUsers.Remove(this);
					}
					this._MstUserType.Entity = value;
					if ((value != null))
					{
						value.MstUsers.Add(this);
						this._UserTypeId = value.Id;
					}
					else
					{
						this._UserTypeId = default(int);
					}
					this.SendPropertyChanged("MstUserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrnProcedureResults(TrnProcedureResult entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = this;
		}
		
		private void detach_TrnProcedureResults(TrnProcedureResult entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = null;
		}
		
		private void attach_MstUserDoctors(MstUserDoctor entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = this;
		}
		
		private void detach_MstUserDoctors(MstUserDoctor entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = null;
		}
		
		private void attach_MstUserDoctors1(MstUserDoctor entity)
		{
			this.SendPropertyChanging();
			entity.MstUser1 = this;
		}
		
		private void detach_MstUserDoctors1(MstUserDoctor entity)
		{
			this.SendPropertyChanging();
			entity.MstUser1 = null;
		}
		
		private void attach_MstUserRates(MstUserRate entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = this;
		}
		
		private void detach_MstUserRates(MstUserRate entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = null;
		}
		
		private void attach_TrnProcedures(TrnProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = this;
		}
		
		private void detach_TrnProcedures(TrnProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = null;
		}
		
		private void attach_MstModalityProcedures(MstModalityProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = this;
		}
		
		private void detach_MstModalityProcedures(MstModalityProcedure entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstUserDoctor")]
	public partial class MstUserDoctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _DoctorId;
		
		private EntityRef<MstUser> _MstUser;
		
		private EntityRef<MstUser> _MstUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDoctorIdChanging(int value);
    partial void OnDoctorIdChanged();
    #endregion
		
		public MstUserDoctor()
		{
			this._MstUser = default(EntityRef<MstUser>);
			this._MstUser1 = default(EntityRef<MstUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._MstUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int NOT NULL")]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._MstUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstUserDoctor", Storage="_MstUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MstUser MstUser
		{
			get
			{
				return this._MstUser.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser.Entity;
				if (((previousValue != value) 
							|| (this._MstUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser.Entity = null;
						previousValue.MstUserDoctors.Remove(this);
					}
					this._MstUser.Entity = value;
					if ((value != null))
					{
						value.MstUserDoctors.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("MstUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstUserDoctor1", Storage="_MstUser1", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true)]
		public MstUser MstUser1
		{
			get
			{
				return this._MstUser1.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser1.Entity;
				if (((previousValue != value) 
							|| (this._MstUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser1.Entity = null;
						previousValue.MstUserDoctors1.Remove(this);
					}
					this._MstUser1.Entity = value;
					if ((value != null))
					{
						value.MstUserDoctors1.Add(this);
						this._DoctorId = value.Id;
					}
					else
					{
						this._DoctorId = default(int);
					}
					this.SendPropertyChanged("MstUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstUserRate")]
	public partial class MstUserRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _ModalityProcedureId;
		
		private string _ModalityProcedureCode;
		
		private decimal _FacilityRate;
		
		private decimal _DoctorRate;
		
		private decimal _ImageRate;
		
		private string _Remarks;
		
		private EntityRef<MstUser> _MstUser;
		
		private EntityRef<MstModalityProcedure> _MstModalityProcedure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnModalityProcedureIdChanging(int value);
    partial void OnModalityProcedureIdChanged();
    partial void OnModalityProcedureCodeChanging(string value);
    partial void OnModalityProcedureCodeChanged();
    partial void OnFacilityRateChanging(decimal value);
    partial void OnFacilityRateChanged();
    partial void OnDoctorRateChanging(decimal value);
    partial void OnDoctorRateChanged();
    partial void OnImageRateChanging(decimal value);
    partial void OnImageRateChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public MstUserRate()
		{
			this._MstUser = default(EntityRef<MstUser>);
			this._MstModalityProcedure = default(EntityRef<MstModalityProcedure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._MstUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityProcedureId", DbType="Int NOT NULL")]
		public int ModalityProcedureId
		{
			get
			{
				return this._ModalityProcedureId;
			}
			set
			{
				if ((this._ModalityProcedureId != value))
				{
					if (this._MstModalityProcedure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModalityProcedureIdChanging(value);
					this.SendPropertyChanging();
					this._ModalityProcedureId = value;
					this.SendPropertyChanged("ModalityProcedureId");
					this.OnModalityProcedureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityProcedureCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ModalityProcedureCode
		{
			get
			{
				return this._ModalityProcedureCode;
			}
			set
			{
				if ((this._ModalityProcedureCode != value))
				{
					this.OnModalityProcedureCodeChanging(value);
					this.SendPropertyChanging();
					this._ModalityProcedureCode = value;
					this.SendPropertyChanged("ModalityProcedureCode");
					this.OnModalityProcedureCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityRate", DbType="Decimal(18,5) NOT NULL")]
		public decimal FacilityRate
		{
			get
			{
				return this._FacilityRate;
			}
			set
			{
				if ((this._FacilityRate != value))
				{
					this.OnFacilityRateChanging(value);
					this.SendPropertyChanging();
					this._FacilityRate = value;
					this.SendPropertyChanged("FacilityRate");
					this.OnFacilityRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorRate", DbType="Decimal(18,5) NOT NULL")]
		public decimal DoctorRate
		{
			get
			{
				return this._DoctorRate;
			}
			set
			{
				if ((this._DoctorRate != value))
				{
					this.OnDoctorRateChanging(value);
					this.SendPropertyChanging();
					this._DoctorRate = value;
					this.SendPropertyChanged("DoctorRate");
					this.OnDoctorRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageRate", DbType="Decimal(18,5) NOT NULL")]
		public decimal ImageRate
		{
			get
			{
				return this._ImageRate;
			}
			set
			{
				if ((this._ImageRate != value))
				{
					this.OnImageRateChanging(value);
					this.SendPropertyChanging();
					this._ImageRate = value;
					this.SendPropertyChanged("ImageRate");
					this.OnImageRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstUserRate", Storage="_MstUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public MstUser MstUser
		{
			get
			{
				return this._MstUser.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser.Entity;
				if (((previousValue != value) 
							|| (this._MstUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser.Entity = null;
						previousValue.MstUserRates.Remove(this);
					}
					this._MstUser.Entity = value;
					if ((value != null))
					{
						value.MstUserRates.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("MstUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModalityProcedure_MstUserRate", Storage="_MstModalityProcedure", ThisKey="ModalityProcedureId", OtherKey="Id", IsForeignKey=true)]
		public MstModalityProcedure MstModalityProcedure
		{
			get
			{
				return this._MstModalityProcedure.Entity;
			}
			set
			{
				MstModalityProcedure previousValue = this._MstModalityProcedure.Entity;
				if (((previousValue != value) 
							|| (this._MstModalityProcedure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstModalityProcedure.Entity = null;
						previousValue.MstUserRates.Remove(this);
					}
					this._MstModalityProcedure.Entity = value;
					if ((value != null))
					{
						value.MstUserRates.Add(this);
						this._ModalityProcedureId = value.Id;
					}
					else
					{
						this._ModalityProcedureId = default(int);
					}
					this.SendPropertyChanged("MstModalityProcedure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstUserType")]
	public partial class MstUserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserType;
		
		private EntitySet<MstUser> _MstUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    #endregion
		
		public MstUserType()
		{
			this._MstUsers = new EntitySet<MstUser>(new Action<MstUser>(this.attach_MstUsers), new Action<MstUser>(this.detach_MstUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUserType_MstUser", Storage="_MstUsers", ThisKey="Id", OtherKey="UserTypeId")]
		public EntitySet<MstUser> MstUsers
		{
			get
			{
				return this._MstUsers;
			}
			set
			{
				this._MstUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstUsers(MstUser entity)
		{
			this.SendPropertyChanging();
			entity.MstUserType = this;
		}
		
		private void detach_MstUsers(MstUser entity)
		{
			this.SendPropertyChanging();
			entity.MstUserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrnProcedure")]
	public partial class TrnProcedure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TransactionNumber;
		
		private System.DateTime _TransactionDateTime;
		
		private string _DICOMFileName;
		
		private string _PatientName;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private int _Age;
		
		private string _Particulars;
		
		private int _ModalityId;
		
		private int _BodyPartId;
		
		private int _UserId;
		
		private EntitySet<TrnProcedureResult> _TrnProcedureResults;
		
		private EntityRef<MstBodyPart> _MstBodyPart;
		
		private EntityRef<MstModality> _MstModality;
		
		private EntityRef<MstUser> _MstUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTransactionNumberChanging(string value);
    partial void OnTransactionNumberChanged();
    partial void OnTransactionDateTimeChanging(System.DateTime value);
    partial void OnTransactionDateTimeChanged();
    partial void OnDICOMFileNameChanging(string value);
    partial void OnDICOMFileNameChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnParticularsChanging(string value);
    partial void OnParticularsChanged();
    partial void OnModalityIdChanging(int value);
    partial void OnModalityIdChanged();
    partial void OnBodyPartIdChanging(int value);
    partial void OnBodyPartIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public TrnProcedure()
		{
			this._TrnProcedureResults = new EntitySet<TrnProcedureResult>(new Action<TrnProcedureResult>(this.attach_TrnProcedureResults), new Action<TrnProcedureResult>(this.detach_TrnProcedureResults));
			this._MstBodyPart = default(EntityRef<MstBodyPart>);
			this._MstModality = default(EntityRef<MstModality>);
			this._MstUser = default(EntityRef<MstUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionNumber
		{
			get
			{
				return this._TransactionNumber;
			}
			set
			{
				if ((this._TransactionNumber != value))
				{
					this.OnTransactionNumberChanging(value);
					this.SendPropertyChanging();
					this._TransactionNumber = value;
					this.SendPropertyChanged("TransactionNumber");
					this.OnTransactionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDateTime
		{
			get
			{
				return this._TransactionDateTime;
			}
			set
			{
				if ((this._TransactionDateTime != value))
				{
					this.OnTransactionDateTimeChanging(value);
					this.SendPropertyChanging();
					this._TransactionDateTime = value;
					this.SendPropertyChanged("TransactionDateTime");
					this.OnTransactionDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMFileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DICOMFileName
		{
			get
			{
				return this._DICOMFileName;
			}
			set
			{
				if ((this._DICOMFileName != value))
				{
					this.OnDICOMFileNameChanging(value);
					this.SendPropertyChanging();
					this._DICOMFileName = value;
					this.SendPropertyChanged("DICOMFileName");
					this.OnDICOMFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Particulars", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Particulars
		{
			get
			{
				return this._Particulars;
			}
			set
			{
				if ((this._Particulars != value))
				{
					this.OnParticularsChanging(value);
					this.SendPropertyChanging();
					this._Particulars = value;
					this.SendPropertyChanged("Particulars");
					this.OnParticularsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityId", DbType="Int NOT NULL")]
		public int ModalityId
		{
			get
			{
				return this._ModalityId;
			}
			set
			{
				if ((this._ModalityId != value))
				{
					if (this._MstModality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModalityIdChanging(value);
					this.SendPropertyChanging();
					this._ModalityId = value;
					this.SendPropertyChanged("ModalityId");
					this.OnModalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyPartId", DbType="Int NOT NULL")]
		public int BodyPartId
		{
			get
			{
				return this._BodyPartId;
			}
			set
			{
				if ((this._BodyPartId != value))
				{
					if (this._MstBodyPart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBodyPartIdChanging(value);
					this.SendPropertyChanging();
					this._BodyPartId = value;
					this.SendPropertyChanged("BodyPartId");
					this.OnBodyPartIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._MstUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrnProcedure_TrnProcedureResult", Storage="_TrnProcedureResults", ThisKey="Id", OtherKey="ProcedureId")]
		public EntitySet<TrnProcedureResult> TrnProcedureResults
		{
			get
			{
				return this._TrnProcedureResults;
			}
			set
			{
				this._TrnProcedureResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBodyPart_TrnProcedure", Storage="_MstBodyPart", ThisKey="BodyPartId", OtherKey="Id", IsForeignKey=true)]
		public MstBodyPart MstBodyPart
		{
			get
			{
				return this._MstBodyPart.Entity;
			}
			set
			{
				MstBodyPart previousValue = this._MstBodyPart.Entity;
				if (((previousValue != value) 
							|| (this._MstBodyPart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstBodyPart.Entity = null;
						previousValue.TrnProcedures.Remove(this);
					}
					this._MstBodyPart.Entity = value;
					if ((value != null))
					{
						value.TrnProcedures.Add(this);
						this._BodyPartId = value.Id;
					}
					else
					{
						this._BodyPartId = default(int);
					}
					this.SendPropertyChanged("MstBodyPart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModality_TrnProcedure", Storage="_MstModality", ThisKey="ModalityId", OtherKey="Id", IsForeignKey=true)]
		public MstModality MstModality
		{
			get
			{
				return this._MstModality.Entity;
			}
			set
			{
				MstModality previousValue = this._MstModality.Entity;
				if (((previousValue != value) 
							|| (this._MstModality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstModality.Entity = null;
						previousValue.TrnProcedures.Remove(this);
					}
					this._MstModality.Entity = value;
					if ((value != null))
					{
						value.TrnProcedures.Add(this);
						this._ModalityId = value.Id;
					}
					else
					{
						this._ModalityId = default(int);
					}
					this.SendPropertyChanged("MstModality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_TrnProcedure", Storage="_MstUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public MstUser MstUser
		{
			get
			{
				return this._MstUser.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser.Entity;
				if (((previousValue != value) 
							|| (this._MstUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser.Entity = null;
						previousValue.TrnProcedures.Remove(this);
					}
					this._MstUser.Entity = value;
					if ((value != null))
					{
						value.TrnProcedures.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("MstUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrnProcedureResults(TrnProcedureResult entity)
		{
			this.SendPropertyChanging();
			entity.TrnProcedure = this;
		}
		
		private void detach_TrnProcedureResults(TrnProcedureResult entity)
		{
			this.SendPropertyChanging();
			entity.TrnProcedure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstModalityProcedure")]
	public partial class MstModalityProcedure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModalityId;
		
		private string _ModalityProcedure;
		
		private string _ModalityResultTemplate;
		
		private System.Nullable<int> _DoctorId;
		
		private EntitySet<TrnProcedureResult> _TrnProcedureResults;
		
		private EntitySet<MstUserRate> _MstUserRates;
		
		private EntityRef<MstModality> _MstModality;
		
		private EntityRef<MstUser> _MstUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModalityIdChanging(int value);
    partial void OnModalityIdChanged();
    partial void OnModalityProcedureChanging(string value);
    partial void OnModalityProcedureChanged();
    partial void OnModalityResultTemplateChanging(string value);
    partial void OnModalityResultTemplateChanged();
    partial void OnDoctorIdChanging(System.Nullable<int> value);
    partial void OnDoctorIdChanged();
    #endregion
		
		public MstModalityProcedure()
		{
			this._TrnProcedureResults = new EntitySet<TrnProcedureResult>(new Action<TrnProcedureResult>(this.attach_TrnProcedureResults), new Action<TrnProcedureResult>(this.detach_TrnProcedureResults));
			this._MstUserRates = new EntitySet<MstUserRate>(new Action<MstUserRate>(this.attach_MstUserRates), new Action<MstUserRate>(this.detach_MstUserRates));
			this._MstModality = default(EntityRef<MstModality>);
			this._MstUser = default(EntityRef<MstUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityId", DbType="Int NOT NULL")]
		public int ModalityId
		{
			get
			{
				return this._ModalityId;
			}
			set
			{
				if ((this._ModalityId != value))
				{
					if (this._MstModality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModalityIdChanging(value);
					this.SendPropertyChanging();
					this._ModalityId = value;
					this.SendPropertyChanged("ModalityId");
					this.OnModalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityProcedure", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ModalityProcedure
		{
			get
			{
				return this._ModalityProcedure;
			}
			set
			{
				if ((this._ModalityProcedure != value))
				{
					this.OnModalityProcedureChanging(value);
					this.SendPropertyChanging();
					this._ModalityProcedure = value;
					this.SendPropertyChanged("ModalityProcedure");
					this.OnModalityProcedureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityResultTemplate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ModalityResultTemplate
		{
			get
			{
				return this._ModalityResultTemplate;
			}
			set
			{
				if ((this._ModalityResultTemplate != value))
				{
					this.OnModalityResultTemplateChanging(value);
					this.SendPropertyChanging();
					this._ModalityResultTemplate = value;
					this.SendPropertyChanged("ModalityResultTemplate");
					this.OnModalityResultTemplateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int")]
		public System.Nullable<int> DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._MstUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModalityProcedure_TrnProcedureResult", Storage="_TrnProcedureResults", ThisKey="Id", OtherKey="ModalityProcedureId")]
		public EntitySet<TrnProcedureResult> TrnProcedureResults
		{
			get
			{
				return this._TrnProcedureResults;
			}
			set
			{
				this._TrnProcedureResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModalityProcedure_MstUserRate", Storage="_MstUserRates", ThisKey="Id", OtherKey="ModalityProcedureId")]
		public EntitySet<MstUserRate> MstUserRates
		{
			get
			{
				return this._MstUserRates;
			}
			set
			{
				this._MstUserRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstModality_MstModalityProcedure", Storage="_MstModality", ThisKey="ModalityId", OtherKey="Id", IsForeignKey=true)]
		public MstModality MstModality
		{
			get
			{
				return this._MstModality.Entity;
			}
			set
			{
				MstModality previousValue = this._MstModality.Entity;
				if (((previousValue != value) 
							|| (this._MstModality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstModality.Entity = null;
						previousValue.MstModalityProcedures.Remove(this);
					}
					this._MstModality.Entity = value;
					if ((value != null))
					{
						value.MstModalityProcedures.Add(this);
						this._ModalityId = value.Id;
					}
					else
					{
						this._ModalityId = default(int);
					}
					this.SendPropertyChanged("MstModality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstModalityProcedure", Storage="_MstUser", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true)]
		public MstUser MstUser
		{
			get
			{
				return this._MstUser.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser.Entity;
				if (((previousValue != value) 
							|| (this._MstUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser.Entity = null;
						previousValue.MstModalityProcedures.Remove(this);
					}
					this._MstUser.Entity = value;
					if ((value != null))
					{
						value.MstModalityProcedures.Add(this);
						this._DoctorId = value.Id;
					}
					else
					{
						this._DoctorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MstUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrnProcedureResults(TrnProcedureResult entity)
		{
			this.SendPropertyChanging();
			entity.MstModalityProcedure = this;
		}
		
		private void detach_TrnProcedureResults(TrnProcedureResult entity)
		{
			this.SendPropertyChanging();
			entity.MstModalityProcedure = null;
		}
		
		private void attach_MstUserRates(MstUserRate entity)
		{
			this.SendPropertyChanging();
			entity.MstModalityProcedure = this;
		}
		
		private void detach_MstUserRates(MstUserRate entity)
		{
			this.SendPropertyChanging();
			entity.MstModalityProcedure = null;
		}
	}
}
#pragma warning restore 1591
